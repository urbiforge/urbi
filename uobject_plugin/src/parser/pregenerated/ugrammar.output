Terminals unused in grammar

   UNARY


Grammar

    0 $accept: start "end of command"

    1 start: root

    2 root: error
    3     | MODE_EXP root_exp
    4     | MODE_EXPS root_exps

    5 root_exp: cstmt.opt ";"
    6         | cstmt.opt ","
    7         | cstmt.opt "end of command"
    8         | error ";"
    9         | error ","
   10         | error "end of command"

   11 root_exps: stmts

   12 stmts: cstmt.opt
   13      | stmts ";" cstmt.opt
   14      | stmts "," cstmt.opt

   15 cstmt.opt: %empty
   16          | cstmt
   17          | cstmt "|"

   18 cstmt: stmt
   19      | cstmt "|" cstmt
   20      | cstmt "&" cstmt

   21 stmt.opt: %empty
   22         | stmt

   23 stmt: primary-exp ":" stmt
   24     | exp

   25 block: "{" stmts "}"
   26      | "{" error "}"
   27      | "{" id "~" id "}"

   28 visibility: %empty
   29           | "private"
   30           | "protected"
   31           | "public"

   32 proto: visibility exp

   33 protos.1: proto
   34         | protos.1 "," proto

   35 protos: %empty
   36       | ":" protos.1

   37 exp: "class" lvalue protos block
   38    | "package" lvalue protos block

   39 id.0: %empty
   40     | id.1 comma.opt

   41 id.1: id
   42     | id.1 "," id

   43 stmt: "enum" id "{" id.0 "}"

   44 from: "identifier"

   45 event_or_function: "function"
   46                  | "identifier"

   47 stmt: "external" "identifier" "identifier"
   48     | "external" "var" "identifier" "." "identifier" from "identifier"
   49     | "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | "import" lvalue
   51     | exp "!" args.opt tilda.opt

   52 routine: "closure"
   53        | "function"

   54 stmt: routine k1_id formals block
   55     | id id formals block

   56 k1_id: "identifier"
   57      | "this" "." "identifier"
   58      | k1_id "." "identifier"

   59 modifier: "identifier" ":" exp

   60 modifiers: modifier
   61          | modifiers modifier

   62 exp: exp "=" exp
   63    | exp "=" exp modifiers
   64    | lvalue "+=" exp
   65    | lvalue "-=" exp
   66    | lvalue "*=" exp
   67    | lvalue "/=" exp
   68    | lvalue "^=" exp
   69    | lvalue "%=" exp

   70 primary-exp: lvalue "--"
   71            | lvalue "++"
   72            | lvalue "->" id

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | "every" "(" exp ")" stmt
   76     | "if" "(" stmts ")" stmt else.opt
   77     | "freezeif" "(" exp tilda.opt ")" stmt
   78     | "freezeif" "(" event_match ")" stmt
   79     | "stopif" "(" exp tilda.opt ")" stmt
   80     | "stopif" "(" event_match ")" stmt
   81     | "switch" "(" exp ")" "{" cases default.opt "}"
   82     | "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | "return" exp.opt
   84     | "break"
   85     | "continue"
   86     | "waituntil" "(" exp tilda.opt ")"
   87     | "waituntil" "(" event_match ")"
   88     | "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | "whenever" "(" event_match ")" stmt else.opt

   90 default.opt: %empty
   91            | "default" ":" stmts

   92 else.opt: %empty
   93         | "else" stmt

   94 onleave.opt: %empty
   95            | "onleave" stmt

   96 cases: %empty
   97      | cases case

   98 case: "case" match ":" stmts

   99 catches.1: catch
  100          | catches.1 catch

  101 match: exp
  102      | exp "if" exp

  103 match.opt: %empty
  104          | "(" match ")"

  105 catch: "catch" match.opt block

  106 catch.opt: %empty
  107          | "catch" block

  108 finally.opt: %empty
  109            | "finally" block

  110 stmt: "try" block catches.1 else.opt finally.opt
  111     | "try" block "finally" block
  112     | "throw" exp.opt
  113     | "loop" stmt
  114     | "for" "(" exp ")" stmt
  115     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | "while" "(" exp ")" stmt

  118 in_or_colon: "in"
  119            | ":"

  120 primary-exp: block
  121            | "do" "(" exp ")" block

  122 detach: "detach"
  123       | "disown"

  124 primary-exp: "assert" "(" exp ")"
  125            | "assert" "{" claims "}"
  126            | detach "(" exp ")"
  127            | detach block
  128            | "isdef" "(" k1_id ")"
  129            | "watch" "(" exp ")"

  130 lvalue: id
  131       | primary-exp "." id
  132       | primary-exp "." "*"

  133 primary-exp: "&" id
  134            | primary-exp "." "&" id

  135 id: "identifier"

  136 bitor-exp: "var" bitor-exp
  137          | "const" "var" bitor-exp

  138 primary-exp: lvalue
  139            | lvalue args

  140 new: "new" "identifier" args.opt

  141 bitor-exp: new

  142 id: "new"

  143 primary-exp: routine formals block

  144 float-exp: "float"

  145 duration: "duration"
  146         | duration "duration"

  147 assoc: exp "=>" exp

  148 assocs.1: assoc
  149         | assocs.1 "," assoc

  150 assocs: "=>"
  151       | assocs.1 comma.opt

  152 dictionary: "[" assocs "]"

  153 tuple.exps: %empty
  154           | exps.1 ","
  155           | exps.2

  156 tuple: "(" tuple.exps ")"

  157 bitor-exps: %empty
  158           | bitor-exps.1 comma.opt

  159 bitor-exps.1: bitor-exp
  160             | bitor-exps.1 "," bitor-exp

  161 literal-exp: float-exp
  162            | "angle"
  163            | duration
  164            | string
  165            | "[" exps "]"
  166            | "<" bitor-exps ">"
  167            | dictionary
  168            | tuple

  169 string: "string"
  170       | string "string"

  171 literal-exp: "__HERE__"

  172 event_match: exp "?" args.opt tilda.opt guard.opt

  173 guard.opt: %empty
  174          | "if" exp

  175 tilda.opt: %empty
  176          | "~" exp

  177 lvalue: primary-exp "[" exps "]"

  178 literal-exp: "this"
  179            | "call"

  180 primary-exp: literal-exp
  181            | "(" exp ")"
  182            | "(" error ")"
  183            | primary-exp "**" primary-exp

  184 unary-exp: primary-exp
  185          | "--" lvalue
  186          | "++" lvalue
  187          | "+" unary-exp
  188          | "-" unary-exp
  189          | "!" unary-exp
  190          | "compl" unary-exp

  191 bitor-exp: unary-exp
  192          | bitor-exp "+" bitor-exp
  193          | bitor-exp "-" bitor-exp
  194          | bitor-exp "*" bitor-exp
  195          | bitor-exp "/" bitor-exp
  196          | bitor-exp "%" bitor-exp
  197          | bitor-exp "^" bitor-exp
  198          | bitor-exp "<<" bitor-exp
  199          | bitor-exp "bitand" bitor-exp
  200          | bitor-exp "bitor" bitor-exp
  201          | bitor-exp ">>" bitor-exp

  202 rel-op: "!="
  203       | "!=="
  204       | "<"
  205       | "<="
  206       | "=="
  207       | "==="
  208       | "=~="
  209       | ">"
  210       | ">="
  211       | "~="

  212 rel-exp: bitor-exp rel-ops

  213 rel-ops: %empty
  214        | rel-ops rel-op bitor-exp

  215 exp: rel-exp
  216    | exp "&&" exp
  217    | exp "||" exp
  218    | exp "in" exp
  219    | exp "!" "in" exp

  220 exp.opt: %empty
  221        | exp

  222 unsigned: "float"

  223 exp: "%unscope:" unsigned

  224 primary-exp: "%exp:" unsigned

  225 lvalue: "%lvalue:" unsigned
  226       | "%id:" unsigned
  227       | primary-exp "." "%id:" unsigned

  228 primary-exp: lvalue "(" "%exps:" unsigned ")"

  229 claims: %empty
  230       | claims.1 semi.opt

  231 claims.1: exp
  232         | claims.1 ";" exp

  233 exps: %empty
  234     | exps.1 comma.opt

  235 exps.1: exp
  236       | exps.1 "," exp

  237 exps.2: exps.1 "," exp

  238 args: "(" exps ")"

  239 args.opt: %empty
  240         | args

  241 identifiers: %empty
  242            | identifiers "identifier"

  243 typespec: ":" exp

  244 typespec.opt: %empty
  245             | typespec

  246 formal: var.opt "identifier" typespec.opt
  247       | var.opt "identifier" "=" exp typespec.opt
  248       | var.opt "identifier" "[" "]"

  249 formals.1: formal
  250          | formals.1 "," formal

  251 formals.0: %empty
  252          | formals.1 comma.opt

  253 formals: %empty
  254        | "(" formals.0 ")"

  255 comma.opt: %empty
  256          | ","

  257 semi.opt: %empty
  258         | ";"

  259 var.opt: %empty
  260        | "var"


Terminals, with rules where they appear

"end of command" (0) 0 7 10
error (256) 2 8 9 10 26 182
MODE_EXP (258) 3
MODE_EXPS (259) 4
"__HERE__" (260) 171
"=" (261) 62 63 247
"break" (262) 84
"case" (263) 98
"catch" (264) 105 107
"closure" (265) 52
"const" (266) 137
"continue" (267) 85
":" (268) 23 36 59 91 98 119 243
"default" (269) 91
"else" (270) 93
"finally" (271) 109 111
"freezeif" (272) 77 78
"function" (273) 45 53
"if" (274) 76 102 174
"in" (275) 118 218 219
"isdef" (276) 128
"{" (277) 25 26 27 43 81 125
"[" (278) 152 165 177 248
"(" (279) 49 73 74 75 76 77 78 79 80 81 82 86 87 88 89 104 114 115
    116 117 121 124 126 128 129 156 181 182 228 238 254
"onleave" (280) 95
"." (281) 48 49 57 58 131 132 134 227
"}" (282) 25 26 27 43 81 125
"]" (283) 152 165 177 248
"return" (284) 83
")" (285) 49 73 74 75 76 77 78 79 80 81 82 86 87 88 89 104 114 115
    116 117 121 124 126 128 129 156 181 182 228 238 254
"stopif" (286) 79 80
"switch" (287) 81
"throw" (288) 112
"~" (289) 27 176
"timeout" (290) 82
"try" (291) 110 111
"var" (292) 48 116 136 137 260
"waituntil" (293) 86 87
"watch" (294) 129
"whenever" (295) 88 89
"," <ast::flavor_type> (296) 6 9 14 34 42 149 154 160 236 237 250 256
";" <ast::flavor_type> (297) 5 8 13 115 232 258
"&" <ast::flavor_type> (298) 20 133 134
"|" <ast::flavor_type> (299) 17 19
"every" <ast::flavor_type> (300) 75
"for" <ast::flavor_type> (301) 114 115 116
"loop" <ast::flavor_type> (302) 113
"while" <ast::flavor_type> (303) 117
"at" <ast::flavor_type> (304) 73 74
"identifier" <libport::Symbol> (305) 44 46 47 48 49 56 57 58 59 116
    135 140 242 246 247 248
ASSIGN (306)
EMPTY (307)
UNARY (308)
"private" (309) 29
"protected" (310) 30
"public" (311) 31
"class" (312) 37
"package" (313) 38
"enum" (314) 43
"external" (315) 47 48 49
"import" (316) 50
"^=" <libport::Symbol> (317) 68
"-=" <libport::Symbol> (318) 65
"%=" <libport::Symbol> (319) 69
"+=" <libport::Symbol> (320) 64
"/=" <libport::Symbol> (321) 67
"*=" <libport::Symbol> (322) 66
"--" (323) 70 185
"++" (324) 71 186
"->" (325) 72
"do" (326) 121
"assert" (327) 124 125
"detach" (328) 122
"disown" (329) 123
"new" <libport::Symbol> (330) 140 142
"angle" <libport::ufloat> (331) 162
"duration" <libport::ufloat> (332) 145 146
"float" <libport::ufloat> (333) 144 222
"=>" (334) 147 150
"string" <std::string> (335) 169 170
"?" (336) 172
"call" (337) 179
"this" (338) 57 178
"!" <libport::Symbol> (339) 51 189 219
"bitand" <libport::Symbol> (340) 199
"bitor" <libport::Symbol> (341) 200
"^" <libport::Symbol> (342) 197
"compl" <libport::Symbol> (343) 190
">>" <libport::Symbol> (344) 201
"<<" <libport::Symbol> (345) 198
"-" <libport::Symbol> (346) 188 193
"%" <libport::Symbol> (347) 196
"+" <libport::Symbol> (348) 187 192
"/" <libport::Symbol> (349) 195
"*" <libport::Symbol> (350) 132 194
"**" <libport::Symbol> (351) 183
"=~=" <libport::Symbol> (352) 208
"==" <libport::Symbol> (353) 206
"===" <libport::Symbol> (354) 207
">=" <libport::Symbol> (355) 210
">" <libport::Symbol> (356) 166 209
"<=" <libport::Symbol> (357) 205
"<" <libport::Symbol> (358) 166 204
"!=" <libport::Symbol> (359) 202
"!==" <libport::Symbol> (360) 203
"~=" <libport::Symbol> (361) 211
"&&" <libport::Symbol> (362) 216
"||" <libport::Symbol> (363) 217
"%unscope:" (364) 223
"%exp:" (365) 224
"%lvalue:" (366) 225
"%id:" (367) 226 227
"%exps:" (368) 228


Nonterminals, with rules where they appear

$accept (114)
    on left: 0
start (115)
    on left: 1, on right: 0
root <ast::rExp> (116)
    on left: 2 3 4, on right: 1
root_exp <ast::rExp> (117)
    on left: 5 6 7 8 9 10, on right: 3
root_exps <ast::rExp> (118)
    on left: 11, on right: 4
stmts <ast::rNary> (119)
    on left: 12 13 14, on right: 11 13 14 25 76 91 98
cstmt.opt <ast::rExp> (120)
    on left: 15 16 17, on right: 5 6 7 12 13 14
cstmt <ast::rExp> (121)
    on left: 18 19 20, on right: 16 17 19 20
stmt.opt <ast::rExp> (122)
    on left: 21 22, on right: 115
stmt <ast::rExp> (123)
    on left: 23 24 43 47 48 49 50 51 54 55 73 74 75 76 77 78 79 80
    81 82 83 84 85 86 87 88 89 110 111 112 113 114 115 116 117, on right:
    18 22 23 73 74 75 76 77 78 79 80 82 88 89 93 95 113 114 115 116
    117
block <ast::rExp> (124)
    on left: 25 26 27, on right: 37 38 54 55 105 107 109 110 111 120
    121 127 143
visibility (125)
    on left: 28 29 30 31, on right: 32
proto <ast::rExp> (126)
    on left: 32, on right: 33 34
protos.1 <ast::exps_type*> (127)
    on left: 33 34, on right: 34 36
protos <ast::exps_type*> (128)
    on left: 35 36, on right: 37 38
exp <ast::rExp> (129)
    on left: 37 38 62 63 64 65 66 67 68 69 215 216 217 218 219 223,
    on right: 24 32 51 59 62 63 64 65 66 67 68 69 73 75 77 79 81 82
    86 88 101 102 114 115 116 117 121 124 126 129 147 172 174 176 181
    216 217 218 219 221 231 232 235 236 237 243 247
id.0 <ast::symbols_type> (130)
    on left: 39 40, on right: 43
id.1 <ast::symbols_type> (131)
    on left: 41 42, on right: 40 42
from (132)
    on left: 44, on right: 48 49
event_or_function <libport::Symbol> (133)
    on left: 45 46, on right: 49
routine <bool> (134)
    on left: 52 53, on right: 54 143
k1_id <ast::rCall> (135)
    on left: 56 57 58, on right: 54 58 128
modifier <ast::Factory::modifier_type> (136)
    on left: 59, on right: 60 61
modifiers <ast::modifiers_type> (137)
    on left: 60 61, on right: 61 63
primary-exp <ast::rExp> (138)
    on left: 70 71 72 120 121 124 125 126 127 128 129 133 134 138 139
    143 180 181 182 183 224 228, on right: 23 131 132 134 177 183 184
    227
default.opt <ast::rNary> (139)
    on left: 90 91, on right: 81
else.opt <ast::rExp> (140)
    on left: 92 93, on right: 76 82 88 89 110
onleave.opt <ast::rExp> (141)
    on left: 94 95, on right: 73 74
cases <ast::Factory::cases_type> (142)
    on left: 96 97, on right: 81 97
case <ast::Factory::case_type> (143)
    on left: 98, on right: 97
catches.1 <ast::catches_type> (144)
    on left: 99 100, on right: 100 110
match <ast::rMatch> (145)
    on left: 101 102, on right: 98 104
match.opt <ast::rMatch> (146)
    on left: 103 104, on right: 105
catch <ast::rCatch> (147)
    on left: 105, on right: 99 100
catch.opt <ast::rExp> (148)
    on left: 106 107, on right: 82
finally.opt <ast::rExp> (149)
    on left: 108 109, on right: 82 110
in_or_colon (150)
    on left: 118 119, on right: 116
detach <bool> (151)
    on left: 122 123, on right: 126 127
lvalue <ast::rLValue> (152)
    on left: 130 131 132 177 225 226 227, on right: 37 38 50 64 65
    66 67 68 69 70 71 72 138 139 185 186 228
id <libport::Symbol> (153)
    on left: 135 142, on right: 27 41 42 43 55 72 130 131 133 134
bitor-exp <ast::rExp> (154)
    on left: 136 137 141 191 192 193 194 195 196 197 198 199 200 201,
    on right: 136 137 159 160 192 193 194 195 196 197 198 199 200 201
    212 214
new <ast::rExp> (155)
    on left: 140, on right: 141
float-exp <ast::rExp> (156)
    on left: 144, on right: 161
duration <libport::ufloat> (157)
    on left: 145 146, on right: 146 163
assoc <ast::dictionary_elt_type> (158)
    on left: 147, on right: 148 149
assocs.1 <ast::dictionary_elts_type> (159)
    on left: 148 149, on right: 149 151
assocs <ast::dictionary_elts_type> (160)
    on left: 150 151, on right: 152
dictionary <ast::rDictionary> (161)
    on left: 152, on right: 167
tuple.exps <ast::exps_type*> (162)
    on left: 153 154 155, on right: 156
tuple <ast::exps_type*> (163)
    on left: 156, on right: 168
bitor-exps <ast::exps_type*> (164)
    on left: 157 158, on right: 166
bitor-exps.1 <ast::exps_type*> (165)
    on left: 159 160, on right: 158 160
literal-exp <ast::rExp> (166)
    on left: 161 162 163 164 165 166 167 168 171 178 179, on right:
    180
string <std::string> (167)
    on left: 169 170, on right: 164 170
event_match <ast::EventMatch> (168)
    on left: 172, on right: 74 78 80 87 89
guard.opt <ast::rExp> (169)
    on left: 173 174, on right: 172
tilda.opt <ast::rExp> (170)
    on left: 175 176, on right: 51 73 77 79 86 88 172
unary-exp <ast::rExp> (171)
    on left: 184 185 186 187 188 189 190, on right: 187 188 189 190
    191
rel-op <libport::Symbol> (172)
    on left: 202 203 204 205 206 207 208 209 210 211, on right: 214
rel-exp <ast::rExp> (173)
    on left: 212, on right: 215
rel-ops <ast::Factory::relations_type> (174)
    on left: 213 214, on right: 212 214
exp.opt <ast::rExp> (175)
    on left: 220 221, on right: 83 112
unsigned <unsigned> (176)
    on left: 222, on right: 49 223 224 225 226 227 228
claims <ast::exps_type*> (177)
    on left: 229 230, on right: 125
claims.1 <ast::exps_type*> (178)
    on left: 231 232, on right: 230 232
exps <ast::exps_type*> (179)
    on left: 233 234, on right: 165 177 238
exps.1 <ast::exps_type*> (180)
    on left: 235 236, on right: 154 234 236 237
exps.2 <ast::exps_type*> (181)
    on left: 237, on right: 155
args <ast::exps_type*> (182)
    on left: 238, on right: 139 240
args.opt <ast::exps_type*> (183)
    on left: 239 240, on right: 51 140 172
identifiers <ast::symbols_type> (184)
    on left: 241 242, on right: 73 74 242
typespec <ast::rExp> (185)
    on left: 243, on right: 245
typespec.opt <ast::rExp> (186)
    on left: 244 245, on right: 246 247
formal <ast::Formal> (187)
    on left: 246 247 248, on right: 249 250
formals.1 <ast::Formals*> (188)
    on left: 249 250, on right: 250 252
formals.0 <ast::Formals*> (189)
    on left: 251 252, on right: 254
formals <ast::Formals*> (190)
    on left: 253 254, on right: 54 55 143
comma.opt (191)
    on left: 255 256, on right: 40 151 158 234 252
semi.opt (192)
    on left: 257 258, on right: 230
var.opt (193)
    on left: 259 260, on right: 246 247 248


State 0

    0 $accept: . start "end of command"
    1 start: . root
    2 root: . error
    3     | . MODE_EXP root_exp
    4     | . MODE_EXPS root_exps

    error      shift, and go to state 1
    MODE_EXP   shift, and go to state 2
    MODE_EXPS  shift, and go to state 3

    start  go to state 4
    root   go to state 5


State 1

    2 root: error .

    $default  reduce using rule 2 (root)


State 2

    3 root: MODE_EXP . root_exp
    5 root_exp: . cstmt.opt ";"
    6         | . cstmt.opt ","
    7         | . cstmt.opt "end of command"
    8         | . error ";"
    9         | . error ","
   10         | . error "end of command"
   15 cstmt.opt: . %empty  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 6
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    "end of command"  reduce using rule 15 (cstmt.opt)
    ","               reduce using rule 15 (cstmt.opt)
    ";"               reduce using rule 15 (cstmt.opt)

    root_exp     go to state 63
    cstmt.opt    go to state 64
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 3

    4 root: MODE_EXPS . root_exps
   11 root_exps: . stmts
   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: . %empty  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    root_exps    go to state 84
    stmts        go to state 85
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 4

    0 $accept: start . "end of command"

    "end of command"  shift, and go to state 87


State 5

    1 start: root .

    $default  reduce using rule 1 (start)


State 6

    8 root_exp: error . ";"
    9         | error . ","
   10         | error . "end of command"

    "end of command"  shift, and go to state 88
    ","               shift, and go to state 89
    ";"               shift, and go to state 90


State 7

  171 literal-exp: "__HERE__" .

    $default  reduce using rule 171 (literal-exp)


State 8

   84 stmt: "break" .

    $default  reduce using rule 84 (stmt)


State 9

   52 routine: "closure" .

    $default  reduce using rule 52 (routine)


State 10

  137 bitor-exp: "const" . "var" bitor-exp

    "var"  shift, and go to state 91


State 11

   85 stmt: "continue" .

    $default  reduce using rule 85 (stmt)


State 12

   77 stmt: "freezeif" . "(" exp tilda.opt ")" stmt
   78     | "freezeif" . "(" event_match ")" stmt

    "("  shift, and go to state 92


State 13

   53 routine: "function" .

    $default  reduce using rule 53 (routine)


State 14

   76 stmt: "if" . "(" stmts ")" stmt else.opt

    "("  shift, and go to state 93


State 15

  128 primary-exp: "isdef" . "(" k1_id ")"

    "("  shift, and go to state 94


State 16

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: . %empty  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   25      | "{" . stmts "}"
   26      | . "{" error "}"
   26      | "{" . error "}"
   27      | . "{" id "~" id "}"
   27      | "{" . id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 95
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    "}"  reduce using rule 15 (cstmt.opt)
    ","  reduce using rule 15 (cstmt.opt)
    ";"  reduce using rule 15 (cstmt.opt)

    stmts        go to state 96
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 97
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 17

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  147 assoc: . exp "=>" exp
  148 assocs.1: . assoc
  149         | . assocs.1 "," assoc
  150 assocs: . "=>"
  151       | . assocs.1 comma.opt
  152 dictionary: . "[" assocs "]"
  152           | "[" . assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  165            | "[" . exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  233 exps: . %empty  ["]"]
  234     | . exps.1 comma.opt
  235 exps.1: . exp
  236       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "=>"          shift, and go to state 98
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 233 (exps)

    block        go to state 67
    exp          go to state 99
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    assoc        go to state 103
    assocs.1     go to state 104
    assocs       go to state 105
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 106
    exps.1       go to state 107


State 18

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  153 tuple.exps: . %empty  [")"]
  154           | . exps.1 ","
  155           | . exps.2
  156 tuple: . "(" tuple.exps ")"
  156      | "(" . tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  181            | "(" . exp ")"
  182            | . "(" error ")"
  182            | "(" . error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  235 exps.1: . exp
  236       | . exps.1 "," exp
  237 exps.2: . exps.1 "," exp

    error         shift, and go to state 108
    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    ")"  reduce using rule 153 (tuple.exps)

    block        go to state 67
    exp          go to state 109
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple.exps   go to state 110
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps.1       go to state 111
    exps.2       go to state 112


State 19

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   83 stmt: "return" . exp.opt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  220 exp.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  221        | . exp
  223 exp: . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 220 (exp.opt)

    block        go to state 67
    exp          go to state 113
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exp.opt      go to state 114

    Conflict between rule 220 and token "&" resolved as reduce ("&" < EMPTY).


State 20

   79 stmt: "stopif" . "(" exp tilda.opt ")" stmt
   80     | "stopif" . "(" event_match ")" stmt

    "("  shift, and go to state 115


State 21

   81 stmt: "switch" . "(" exp ")" "{" cases default.opt "}"

    "("  shift, and go to state 116


State 22

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  112 stmt: "throw" . exp.opt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  220 exp.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  221        | . exp
  223 exp: . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 220 (exp.opt)

    block        go to state 67
    exp          go to state 113
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exp.opt      go to state 117

    Conflict between rule 220 and token "&" resolved as reduce ("&" < EMPTY).


State 23

   82 stmt: "timeout" . "(" exp ")" stmt catch.opt else.opt finally.opt

    "("  shift, and go to state 118


State 24

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  110 stmt: "try" . block catches.1 else.opt finally.opt
  111     | "try" . block "finally" block

    "{"  shift, and go to state 16

    block  go to state 119


State 25

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  136          | "var" . bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 121
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 26

   86 stmt: "waituntil" . "(" exp tilda.opt ")"
   87     | "waituntil" . "(" event_match ")"

    "("  shift, and go to state 122


State 27

  129 primary-exp: "watch" . "(" exp ")"

    "("  shift, and go to state 123


State 28

   88 stmt: "whenever" . "(" exp tilda.opt ")" stmt else.opt
   89     | "whenever" . "(" event_match ")" stmt else.opt

    "("  shift, and go to state 124


State 29

  133 primary-exp: "&" . id
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 126


State 30

   75 stmt: "every" . "(" exp ")" stmt

    "("  shift, and go to state 127


State 31

  114 stmt: "for" . "(" exp ")" stmt
  115     | "for" . "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | "for" . "(" "var" "identifier" in_or_colon exp ")" stmt

    "("  shift, and go to state 128


State 32

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  113     | "loop" . stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 129
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 33

  117 stmt: "while" . "(" exp ")" stmt

    "("  shift, and go to state 130


State 34

   73 stmt: "at" . identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" . identifiers "(" event_match ")" stmt onleave.opt
  241 identifiers: . %empty
  242            | . identifiers "identifier"

    $default  reduce using rule 241 (identifiers)

    identifiers  go to state 131


State 35

  135 id: "identifier" .

    $default  reduce using rule 135 (id)


State 36

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  224            | . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 133
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 37

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  224            | . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 134
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 38

   43 stmt: "enum" . id "{" id.0 "}"
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 135


State 39

   45 event_or_function: . "function"
   46                  | . "identifier"
   47 stmt: "external" . "identifier" "identifier"
   48     | "external" . "var" "identifier" "." "identifier" from "identifier"
   49     | "external" . event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "function"    shift, and go to state 136
    "var"         shift, and go to state 137
    "identifier"  shift, and go to state 138

    event_or_function  go to state 139


State 40

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   50 stmt: "import" . lvalue
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  224            | . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 140
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 41

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  185 unary-exp: "--" . lvalue
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 141
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 42

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  186 unary-exp: "++" . lvalue
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 142
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 43

  121 primary-exp: "do" . "(" exp ")" block

    "("  shift, and go to state 143


State 44

  124 primary-exp: "assert" . "(" exp ")"
  125            | "assert" . "{" claims "}"

    "{"  shift, and go to state 144
    "("  shift, and go to state 145


State 45

  122 detach: "detach" .

    $default  reduce using rule 122 (detach)


State 46

  123 detach: "disown" .

    $default  reduce using rule 123 (detach)


State 47

  140 new: "new" . "identifier" args.opt
  142 id: "new" .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "(", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "new", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "identifier"  shift, and go to state 146

    $default  reduce using rule 142 (id)

    Conflict between rule 142 and token "identifier" resolved as shift ("new" < "identifier").


State 48

  162 literal-exp: "angle" .

    $default  reduce using rule 162 (literal-exp)


State 49

  145 duration: "duration" .

    $default  reduce using rule 145 (duration)


State 50

  144 float-exp: "float" .

    $default  reduce using rule 144 (float-exp)


State 51

  169 string: "string" .

    $default  reduce using rule 169 (string)


State 52

  179 literal-exp: "call" .

    $default  reduce using rule 179 (literal-exp)


State 53

  178 literal-exp: "this" .

    $default  reduce using rule 178 (literal-exp)


State 54

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  189          | "!" . unary-exp
  190          | . "compl" unary-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 147


State 55

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  190          | "compl" . unary-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 148


State 56

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  188          | "-" . unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 149


State 57

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  187          | "+" . unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 150


State 58

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  157 bitor-exps: . %empty  [">"]
  158           | . bitor-exps.1 comma.opt
  159 bitor-exps.1: . bitor-exp
  160             | . bitor-exps.1 "," bitor-exp
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  166            | "<" . bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 157 (bitor-exps)

    block         go to state 67
    routine       go to state 100
    primary-exp   go to state 101
    detach        go to state 71
    lvalue        go to state 120
    id            go to state 102
    bitor-exp     go to state 151
    new           go to state 75
    float-exp     go to state 76
    duration      go to state 77
    dictionary    go to state 78
    tuple         go to state 79
    bitor-exps    go to state 152
    bitor-exps.1  go to state 153
    literal-exp   go to state 80
    string        go to state 81
    unary-exp     go to state 82


State 59

  222 unsigned: . "float"
  223 exp: "%unscope:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 155


State 60

  222 unsigned: . "float"
  224 primary-exp: "%exp:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 156


State 61

  222 unsigned: . "float"
  225 lvalue: "%lvalue:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 157


State 62

  222 unsigned: . "float"
  226 lvalue: "%id:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 158


State 63

    3 root: MODE_EXP root_exp .

    $default  reduce using rule 3 (root)


State 64

    5 root_exp: cstmt.opt . ";"
    6         | cstmt.opt . ","
    7         | cstmt.opt . "end of command"

    "end of command"  shift, and go to state 159
    ","               shift, and go to state 160
    ";"               shift, and go to state 161


State 65

   16 cstmt.opt: cstmt .  ["end of command", "case", "default", "}", ")", ",", ";"]
   17          | cstmt . "|"
   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 162
    "|"  shift, and go to state 163

    $default  reduce using rule 16 (cstmt.opt)


State 66

   18 cstmt: stmt .

    $default  reduce using rule 18 (cstmt)


State 67

  120 primary-exp: block .

    $default  reduce using rule 120 (primary-exp)


State 68

   24 stmt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 166
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 24 (stmt)


State 69

   54 stmt: routine . k1_id formals block
   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  143 primary-exp: routine . formals block
  253 formals: . %empty  ["{"]
  254        | . "(" formals.0 ")"

    "("           shift, and go to state 169
    "identifier"  shift, and go to state 170
    "this"        shift, and go to state 171

    $default  reduce using rule 253 (formals)

    k1_id    go to state 172
    formals  go to state 173


State 70

   23 stmt: primary-exp . ":" stmt
  131 lvalue: primary-exp . "." id
  132       | primary-exp . "." "*"
  134 primary-exp: primary-exp . "." "&" id
  177 lvalue: primary-exp . "[" exps "]"
  183 primary-exp: primary-exp . "**" primary-exp
  184 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", "default", "else", "finally", "in", "onleave", "}", ")", ",", ";", "&", "|", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  227 lvalue: primary-exp . "." "%id:" unsigned

    ":"   shift, and go to state 174
    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 184 (unary-exp)


State 71

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  126 primary-exp: detach . "(" exp ")"
  127            | detach . block

    "{"  shift, and go to state 16
    "("  shift, and go to state 178

    block  go to state 179


State 72

   64 exp: lvalue . "+=" exp
   65    | lvalue . "-=" exp
   66    | lvalue . "*=" exp
   67    | lvalue . "/=" exp
   68    | lvalue . "^=" exp
   69    | lvalue . "%=" exp
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  139            | lvalue . args
  228            | lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    "("   shift, and go to state 180
    "^="  shift, and go to state 181
    "-="  shift, and go to state 182
    "%="  shift, and go to state 183
    "+="  shift, and go to state 184
    "/="  shift, and go to state 185
    "*="  shift, and go to state 186
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    $default  reduce using rule 138 (primary-exp)

    args  go to state 190


State 73

   55 stmt: id . id formals block
  130 lvalue: id .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "in", "[", "(", "onleave", ".", "}", ")", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 130 (lvalue)

    id  go to state 191


State 74

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp
  212 rel-exp: bitor-exp . rel-ops
  213 rel-ops: . %empty  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  214        | . rel-ops rel-op bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 213 (rel-ops)

    rel-ops  go to state 202


State 75

  141 bitor-exp: new .

    $default  reduce using rule 141 (bitor-exp)


State 76

  161 literal-exp: float-exp .

    $default  reduce using rule 161 (literal-exp)


State 77

  146 duration: duration . "duration"
  163 literal-exp: duration .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "duration"  shift, and go to state 203

    $default  reduce using rule 163 (literal-exp)


State 78

  167 literal-exp: dictionary .

    $default  reduce using rule 167 (literal-exp)


State 79

  168 literal-exp: tuple .

    $default  reduce using rule 168 (literal-exp)


State 80

  180 primary-exp: literal-exp .

    $default  reduce using rule 180 (primary-exp)


State 81

  164 literal-exp: string .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  170 string: string . "string"

    "string"  shift, and go to state 204

    $default  reduce using rule 164 (literal-exp)


State 82

  191 bitor-exp: unary-exp .

    $default  reduce using rule 191 (bitor-exp)


State 83

  215 exp: rel-exp .

    $default  reduce using rule 215 (exp)


State 84

    4 root: MODE_EXPS root_exps .

    $default  reduce using rule 4 (root)


State 85

   11 root_exps: stmts .  ["end of command"]
   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 11 (root_exps)


State 86

   12 stmts: cstmt.opt .

    $default  reduce using rule 12 (stmts)


State 87

    0 $accept: start "end of command" .

    $default  accept


State 88

   10 root_exp: error "end of command" .

    $default  reduce using rule 10 (root_exp)


State 89

    9 root_exp: error "," .

    $default  reduce using rule 9 (root_exp)


State 90

    8 root_exp: error ";" .

    $default  reduce using rule 8 (root_exp)


State 91

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  137          | "const" "var" . bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 207
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 92

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   77 stmt: "freezeif" "(" . exp tilda.opt ")" stmt
   78     | "freezeif" "(" . event_match ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  172 event_match: . exp "?" args.opt tilda.opt guard.opt
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 208
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 209
    unary-exp    go to state 82
    rel-exp      go to state 83


State 93

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: . %empty  [")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" . stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 210
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 94

   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  128 primary-exp: "isdef" "(" . k1_id ")"

    "identifier"  shift, and go to state 170
    "this"        shift, and go to state 171

    k1_id  go to state 211


State 95

   26 block: "{" error . "}"

    "}"  shift, and go to state 212


State 96

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   25 block: "{" stmts . "}"

    "}"  shift, and go to state 213
    ","  shift, and go to state 205
    ";"  shift, and go to state 206


State 97

   27 block: "{" id . "~" id "}"
   55 stmt: id . id formals block
  130 lvalue: id .  ["=", ":", "in", "[", "(", ".", "}", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  135 id: . "identifier"
  142   | . "new"

    "~"           shift, and go to state 214
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 130 (lvalue)

    id  go to state 191


State 98

  150 assocs: "=>" .

    $default  reduce using rule 150 (assocs)


State 99

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  147 assoc: exp . "=>" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  235 exps.1: exp .  ["]", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "=>"  shift, and go to state 215
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 235 (exps.1)


State 100

  143 primary-exp: routine . formals block
  253 formals: . %empty  ["{"]
  254        | . "(" formals.0 ")"

    "("  shift, and go to state 169

    $default  reduce using rule 253 (formals)

    formals  go to state 173


State 101

  131 lvalue: primary-exp . "." id
  132       | primary-exp . "." "*"
  134 primary-exp: primary-exp . "." "&" id
  177 lvalue: primary-exp . "[" exps "]"
  183 primary-exp: primary-exp . "**" primary-exp
  184 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  227 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 184 (unary-exp)


State 102

  130 lvalue: id .

    $default  reduce using rule 130 (lvalue)


State 103

  148 assocs.1: assoc .

    $default  reduce using rule 148 (assocs.1)


State 104

  149 assocs.1: assocs.1 . "," assoc
  151 assocs: assocs.1 . comma.opt
  255 comma.opt: . %empty  ["]"]
  256          | . ","

    ","  shift, and go to state 217

    $default  reduce using rule 255 (comma.opt)

    comma.opt  go to state 218


State 105

  152 dictionary: "[" assocs . "]"

    "]"  shift, and go to state 219


State 106

  165 literal-exp: "[" exps . "]"

    "]"  shift, and go to state 220


State 107

  234 exps: exps.1 . comma.opt
  236 exps.1: exps.1 . "," exp
  255 comma.opt: . %empty  ["]", ")"]
  256          | . ","

    ","  shift, and go to state 221

    $default  reduce using rule 255 (comma.opt)

    comma.opt  go to state 222


State 108

  182 primary-exp: "(" error . ")"

    ")"  shift, and go to state 223


State 109

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  181 primary-exp: "(" exp . ")"
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  235 exps.1: exp .  [","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 224
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 235 (exps.1)


State 110

  156 tuple: "(" tuple.exps . ")"

    ")"  shift, and go to state 225


State 111

  154 tuple.exps: exps.1 . ","
  236 exps.1: exps.1 . "," exp
  237 exps.2: exps.1 . "," exp

    ","  shift, and go to state 226


State 112

  155 tuple.exps: exps.2 .

    $default  reduce using rule 155 (tuple.exps)


State 113

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  221 exp.opt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 221 (exp.opt)


State 114

   83 stmt: "return" exp.opt .

    $default  reduce using rule 83 (stmt)


State 115

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   79 stmt: "stopif" "(" . exp tilda.opt ")" stmt
   80     | "stopif" "(" . event_match ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  172 event_match: . exp "?" args.opt tilda.opt guard.opt
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 227
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 228
    unary-exp    go to state 82
    rel-exp      go to state 83


State 116

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   81 stmt: "switch" "(" . exp ")" "{" cases default.opt "}"
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 229
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 117

  112 stmt: "throw" exp.opt .

    $default  reduce using rule 112 (stmt)


State 118

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   82 stmt: "timeout" "(" . exp ")" stmt catch.opt else.opt finally.opt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 230
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 119

   99 catches.1: . catch
  100          | . catches.1 catch
  105 catch: . "catch" match.opt block
  110 stmt: "try" block . catches.1 else.opt finally.opt
  111     | "try" block . "finally" block

    "catch"    shift, and go to state 231
    "finally"  shift, and go to state 232

    catches.1  go to state 233
    catch      go to state 234


State 120

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  139            | lvalue . args
  228            | lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    $default  reduce using rule 138 (primary-exp)

    args  go to state 190


State 121

  136 bitor-exp: "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  192          | bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 136 (bitor-exp)

    Conflict between rule 136 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 136 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 136 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 136 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 136 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 136 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 136 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 136 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 136 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 136 and token "*" resolved as shift ("var" < "*").


State 122

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   86 stmt: "waituntil" "(" . exp tilda.opt ")"
   87     | "waituntil" "(" . event_match ")"
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  172 event_match: . exp "?" args.opt tilda.opt guard.opt
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 235
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 236
    unary-exp    go to state 82
    rel-exp      go to state 83


State 123

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  129            | "watch" "(" . exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 237
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 124

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   88 stmt: "whenever" "(" . exp tilda.opt ")" stmt else.opt
   89     | "whenever" "(" . event_match ")" stmt else.opt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  172 event_match: . exp "?" args.opt tilda.opt guard.opt
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 238
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 239
    unary-exp    go to state 82
    rel-exp      go to state 83


State 125

  142 id: "new" .

    $default  reduce using rule 142 (id)


State 126

  133 primary-exp: "&" id .

    $default  reduce using rule 133 (primary-exp)


State 127

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   75 stmt: "every" "(" . exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 240
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 128

   21 stmt.opt: . %empty  [";"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  114     | "for" "(" . exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  115     | "for" "(" . stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  116     | "for" "(" . "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 241
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 242
    stmt         go to state 243
    block        go to state 67
    exp          go to state 244
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 129

  113 stmt: "loop" stmt .

    $default  reduce using rule 113 (stmt)


State 130

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  117 stmt: "while" "(" . exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 245
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 131

   73 stmt: "at" identifiers . "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers . "(" event_match ")" stmt onleave.opt
  242 identifiers: identifiers . "identifier"

    "("           shift, and go to state 246
    "identifier"  shift, and go to state 247


State 132

  131 lvalue: primary-exp . "." id
  132       | primary-exp . "." "*"
  134 primary-exp: primary-exp . "." "&" id
  177 lvalue: primary-exp . "[" exps "]"
  183 primary-exp: primary-exp . "**" primary-exp
  227 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177


State 133

   35 protos: . %empty  ["{"]
   36       | . ":" protos.1
   37 exp: "class" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["[", ".", "**"]
  139            | lvalue . args
  228            | lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    ":"   shift, and go to state 248
    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 138 (primary-exp)

    protos  go to state 249
    args    go to state 190


State 134

   35 protos: . %empty  ["{"]
   36       | . ":" protos.1
   38 exp: "package" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["[", ".", "**"]
  139            | lvalue . args
  228            | lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    ":"   shift, and go to state 248
    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 138 (primary-exp)

    protos  go to state 250
    args    go to state 190


State 135

   43 stmt: "enum" id . "{" id.0 "}"

    "{"  shift, and go to state 251


State 136

   45 event_or_function: "function" .

    $default  reduce using rule 45 (event_or_function)


State 137

   48 stmt: "external" "var" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 252


State 138

   46 event_or_function: "identifier" .  ["("]
   47 stmt: "external" "identifier" . "identifier"

    "identifier"  shift, and go to state 253

    $default  reduce using rule 46 (event_or_function)


State 139

   49 stmt: "external" event_or_function . "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "("  shift, and go to state 254


State 140

   50 stmt: "import" lvalue .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["[", ".", "**"]
  139            | lvalue . args
  228            | lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 138 (primary-exp)
    "."       reduce using rule 138 (primary-exp)
    "**"      reduce using rule 138 (primary-exp)
    $default  reduce using rule 50 (stmt)

    args  go to state 190


State 141

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["[", ".", "**"]
  139            | lvalue . args
  185 unary-exp: "--" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  228 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 138 (primary-exp)
    "."       reduce using rule 138 (primary-exp)
    "**"      reduce using rule 138 (primary-exp)
    $default  reduce using rule 185 (unary-exp)

    args  go to state 190


State 142

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  138            | lvalue .  ["[", ".", "**"]
  139            | lvalue . args
  186 unary-exp: "++" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  228 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  238 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 138 (primary-exp)
    "."       reduce using rule 138 (primary-exp)
    "**"      reduce using rule 138 (primary-exp)
    $default  reduce using rule 186 (unary-exp)

    args  go to state 190


State 143

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  121            | "do" "(" . exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 255
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 144

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  125            | "assert" "{" . claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  229 claims: . %empty  ["}"]
  230       | . claims.1 semi.opt
  231 claims.1: . exp
  232         | . claims.1 ";" exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 229 (claims)

    block        go to state 67
    exp          go to state 256
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    claims       go to state 257
    claims.1     go to state 258


State 145

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  124            | "assert" "(" . exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 259
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 146

  140 new: "new" "identifier" . args.opt
  238 args: . "(" exps ")"
  239 args.opt: . %empty  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  240         | . args

    "("  shift, and go to state 260

    $default  reduce using rule 239 (args.opt)

    args      go to state 261
    args.opt  go to state 262


State 147

  189 unary-exp: "!" unary-exp .

    $default  reduce using rule 189 (unary-exp)


State 148

  190 unary-exp: "compl" unary-exp .

    $default  reduce using rule 190 (unary-exp)


State 149

  188 unary-exp: "-" unary-exp .

    $default  reduce using rule 188 (unary-exp)


State 150

  187 unary-exp: "+" unary-exp .

    $default  reduce using rule 187 (unary-exp)


State 151

  159 bitor-exps.1: bitor-exp .  [",", ">"]
  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 159 (bitor-exps.1)


State 152

  166 literal-exp: "<" bitor-exps . ">"

    ">"  shift, and go to state 263


State 153

  158 bitor-exps: bitor-exps.1 . comma.opt
  160 bitor-exps.1: bitor-exps.1 . "," bitor-exp
  255 comma.opt: . %empty  [">"]
  256          | . ","

    ","  shift, and go to state 264

    $default  reduce using rule 255 (comma.opt)

    comma.opt  go to state 265


State 154

  222 unsigned: "float" .

    $default  reduce using rule 222 (unsigned)


State 155

  223 exp: "%unscope:" unsigned .

    $default  reduce using rule 223 (exp)


State 156

  224 primary-exp: "%exp:" unsigned .

    $default  reduce using rule 224 (primary-exp)


State 157

  225 lvalue: "%lvalue:" unsigned .

    $default  reduce using rule 225 (lvalue)


State 158

  226 lvalue: "%id:" unsigned .

    $default  reduce using rule 226 (lvalue)


State 159

    7 root_exp: cstmt.opt "end of command" .

    $default  reduce using rule 7 (root_exp)


State 160

    6 root_exp: cstmt.opt "," .

    $default  reduce using rule 6 (root_exp)


State 161

    5 root_exp: cstmt.opt ";" .

    $default  reduce using rule 5 (root_exp)


State 162

   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   20      | cstmt "&" . cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    cstmt        go to state 266
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 163

   17 cstmt.opt: cstmt "|" .  ["end of command", "case", "default", "}", ")", ",", ";"]
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   19      | cstmt "|" . cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 17 (cstmt.opt)

    cstmt        go to state 267
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 164

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   62    | exp "=" . exp
   63    | . exp "=" exp modifiers
   63    | exp "=" . exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 268
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 165

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  218    | exp "in" . exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 269
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 166

   51 stmt: exp "!" . args.opt tilda.opt
  219 exp: exp "!" . "in" exp
  238 args: . "(" exps ")"
  239 args.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", "~", ",", ";", "&", "|"]
  240         | . args

    "in"  shift, and go to state 270
    "("   shift, and go to state 260

    $default  reduce using rule 239 (args.opt)

    args      go to state 261
    args.opt  go to state 271


State 167

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  216    | exp "&&" . exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 272
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 168

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  217    | exp "||" . exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 273
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 169

  246 formal: . var.opt "identifier" typespec.opt
  247       | . var.opt "identifier" "=" exp typespec.opt
  248       | . var.opt "identifier" "[" "]"
  249 formals.1: . formal
  250          | . formals.1 "," formal
  251 formals.0: . %empty  [")"]
  252          | . formals.1 comma.opt
  254 formals: "(" . formals.0 ")"
  259 var.opt: . %empty  ["identifier"]
  260        | . "var"

    "var"  shift, and go to state 274

    "identifier"  reduce using rule 259 (var.opt)
    $default      reduce using rule 251 (formals.0)

    formal     go to state 275
    formals.1  go to state 276
    formals.0  go to state 277
    var.opt    go to state 278


State 170

   56 k1_id: "identifier" .

    $default  reduce using rule 56 (k1_id)


State 171

   57 k1_id: "this" . "." "identifier"

    "."  shift, and go to state 279


State 172

   54 stmt: routine k1_id . formals block
   58 k1_id: k1_id . "." "identifier"
  253 formals: . %empty  ["{"]
  254        | . "(" formals.0 ")"

    "("  shift, and go to state 169
    "."  shift, and go to state 280

    $default  reduce using rule 253 (formals)

    formals  go to state 281


State 173

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  143 primary-exp: routine formals . block

    "{"  shift, and go to state 16

    block  go to state 282


State 174

   23 stmt: . primary-exp ":" stmt
   23     | primary-exp ":" . stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 283
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 175

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  177       | primary-exp "[" . exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  233 exps: . %empty  ["]"]
  234     | . exps.1 comma.opt
  235 exps.1: . exp
  236       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 233 (exps)

    block        go to state 67
    exp          go to state 284
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 285
    exps.1       go to state 107


State 176

  131 lvalue: primary-exp "." . id
  132       | primary-exp "." . "*"
  134 primary-exp: primary-exp "." . "&" id
  135 id: . "identifier"
  142   | . "new"
  227 lvalue: primary-exp "." . "%id:" unsigned

    "&"           shift, and go to state 286
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125
    "*"           shift, and go to state 287
    "%id:"        shift, and go to state 288

    id  go to state 289


State 177

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  138 primary-exp: . lvalue
  139            | . lvalue args
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  183            | primary-exp "**" . primary-exp
  224            | . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 290
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


State 178

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  126            | detach "(" . exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 291
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 179

  127 primary-exp: detach block .

    $default  reduce using rule 127 (primary-exp)


State 180

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  228            | lvalue "(" . "%exps:" unsigned ")"
  233 exps: . %empty  [")"]
  234     | . exps.1 comma.opt
  235 exps.1: . exp
  236       | . exps.1 "," exp
  238 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62
    "%exps:"      shift, and go to state 292

    $default  reduce using rule 233 (exps)

    block        go to state 67
    exp          go to state 284
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 293
    exps.1       go to state 107


State 181

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   68    | lvalue "^=" . exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 294
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 182

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   65    | lvalue "-=" . exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 295
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 183

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   69    | lvalue "%=" . exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 296
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 184

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   64    | lvalue "+=" . exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 297
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 185

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   67    | lvalue "/=" . exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 298
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 186

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   66    | lvalue "*=" . exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 299
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 187

   70 primary-exp: lvalue "--" .

    $default  reduce using rule 70 (primary-exp)


State 188

   71 primary-exp: lvalue "++" .

    $default  reduce using rule 71 (primary-exp)


State 189

   72 primary-exp: lvalue "->" . id
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 300


State 190

  139 primary-exp: lvalue args .

    $default  reduce using rule 139 (primary-exp)


State 191

   55 stmt: id id . formals block
  253 formals: . %empty  ["{"]
  254        | . "(" formals.0 ")"

    "("  shift, and go to state 169

    $default  reduce using rule 253 (formals)

    formals  go to state 301


State 192

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  199          | bitor-exp "bitand" . bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 302
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 193

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  200          | bitor-exp "bitor" . bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 303
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 194

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  197          | bitor-exp "^" . bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 304
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 195

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  201          | bitor-exp ">>" . bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 305
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 196

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  198          | bitor-exp "<<" . bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 306
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 197

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  193          | bitor-exp "-" . bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 307
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 198

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  196          | bitor-exp "%" . bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 308
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 199

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  192          | bitor-exp "+" . bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 309
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 200

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  195          | bitor-exp "/" . bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 310
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 201

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  194          | bitor-exp "*" . bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 311
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 202

  202 rel-op: . "!="
  203       | . "!=="
  204       | . "<"
  205       | . "<="
  206       | . "=="
  207       | . "==="
  208       | . "=~="
  209       | . ">"
  210       | . ">="
  211       | . "~="
  212 rel-exp: bitor-exp rel-ops .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "&&", "||"]
  214 rel-ops: rel-ops . rel-op bitor-exp

    "=~="  shift, and go to state 312
    "=="   shift, and go to state 313
    "==="  shift, and go to state 314
    ">="   shift, and go to state 315
    ">"    shift, and go to state 316
    "<="   shift, and go to state 317
    "<"    shift, and go to state 318
    "!="   shift, and go to state 319
    "!=="  shift, and go to state 320
    "~="   shift, and go to state 321

    $default  reduce using rule 212 (rel-exp)

    rel-op  go to state 322


State 203

  146 duration: duration "duration" .

    $default  reduce using rule 146 (duration)


State 204

  170 string: string "string" .

    $default  reduce using rule 170 (string)


State 205

   14 stmts: stmts "," . cstmt.opt
   15 cstmt.opt: . %empty  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 323
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 206

   13 stmts: stmts ";" . cstmt.opt
   15 cstmt.opt: . %empty  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 324
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 207

  137 bitor-exp: "const" "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  192          | bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 137 (bitor-exp)

    Conflict between rule 137 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 137 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 137 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 137 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 137 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 137 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 137 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 137 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 137 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 137 and token "*" resolved as shift ("var" < "*").


State 208

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   77 stmt: "freezeif" "(" exp . tilda.opt ")" stmt
  172 event_match: exp . "?" args.opt tilda.opt guard.opt
  175 tilda.opt: . %empty  [")"]
  176          | . "~" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 325
    "?"   shift, and go to state 326
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 327


State 209

   78 stmt: "freezeif" "(" event_match . ")" stmt

    ")"  shift, and go to state 328


State 210

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   76 stmt: "if" "(" stmts . ")" stmt else.opt

    ")"  shift, and go to state 329
    ","  shift, and go to state 205
    ";"  shift, and go to state 206


State 211

   58 k1_id: k1_id . "." "identifier"
  128 primary-exp: "isdef" "(" k1_id . ")"

    "."  shift, and go to state 280
    ")"  shift, and go to state 330


State 212

   26 block: "{" error "}" .

    $default  reduce using rule 26 (block)


State 213

   25 block: "{" stmts "}" .

    $default  reduce using rule 25 (block)


State 214

   27 block: "{" id "~" . id "}"
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 331


State 215

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  147 assoc: exp "=>" . exp
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 332
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 216

  219 exp: exp "!" . "in" exp

    "in"  shift, and go to state 270


State 217

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  147 assoc: . exp "=>" exp
  149 assocs.1: assocs.1 "," . assoc
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  256 comma.opt: "," .  ["]"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 256 (comma.opt)

    block        go to state 67
    exp          go to state 333
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    assoc        go to state 334
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 218

  151 assocs: assocs.1 comma.opt .

    $default  reduce using rule 151 (assocs)


State 219

  152 dictionary: "[" assocs "]" .

    $default  reduce using rule 152 (dictionary)


State 220

  165 literal-exp: "[" exps "]" .

    $default  reduce using rule 165 (literal-exp)


State 221

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  236 exps.1: exps.1 "," . exp
  256 comma.opt: "," .  ["]", ")"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 256 (comma.opt)

    block        go to state 67
    exp          go to state 335
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 222

  234 exps: exps.1 comma.opt .

    $default  reduce using rule 234 (exps)


State 223

  182 primary-exp: "(" error ")" .

    $default  reduce using rule 182 (primary-exp)


State 224

  181 primary-exp: "(" exp ")" .

    $default  reduce using rule 181 (primary-exp)


State 225

  156 tuple: "(" tuple.exps ")" .

    $default  reduce using rule 156 (tuple)


State 226

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  154 tuple.exps: exps.1 "," .  [")"]
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  236 exps.1: exps.1 "," . exp
  237 exps.2: exps.1 "," . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 154 (tuple.exps)

    block        go to state 67
    exp          go to state 336
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 227

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   79 stmt: "stopif" "(" exp . tilda.opt ")" stmt
  172 event_match: exp . "?" args.opt tilda.opt guard.opt
  175 tilda.opt: . %empty  [")"]
  176          | . "~" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 325
    "?"   shift, and go to state 326
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 337


State 228

   80 stmt: "stopif" "(" event_match . ")" stmt

    ")"  shift, and go to state 338


State 229

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   81 stmt: "switch" "(" exp . ")" "{" cases default.opt "}"
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 339
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 230

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   82 stmt: "timeout" "(" exp . ")" stmt catch.opt else.opt finally.opt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 340
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 231

  103 match.opt: . %empty  ["{"]
  104          | . "(" match ")"
  105 catch: "catch" . match.opt block

    "("  shift, and go to state 341

    $default  reduce using rule 103 (match.opt)

    match.opt  go to state 342


State 232

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  111 stmt: "try" block "finally" . block

    "{"  shift, and go to state 16

    block  go to state 343


State 233

   92 else.opt: . %empty  ["end of command", "case", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   93         | . "else" stmt
  100 catches.1: catches.1 . catch
  105 catch: . "catch" match.opt block
  110 stmt: "try" block catches.1 . else.opt finally.opt

    "catch"  shift, and go to state 231
    "else"   shift, and go to state 344

    $default  reduce using rule 92 (else.opt)

    else.opt  go to state 345
    catch     go to state 346

    Conflict between rule 92 and token "catch" resolved as shift (EMPTY < "catch").
    Conflict between rule 92 and token "else" resolved as shift (EMPTY < "else").


State 234

   99 catches.1: catch .

    $default  reduce using rule 99 (catches.1)


State 235

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   86 stmt: "waituntil" "(" exp . tilda.opt ")"
  172 event_match: exp . "?" args.opt tilda.opt guard.opt
  175 tilda.opt: . %empty  [")"]
  176          | . "~" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 325
    "?"   shift, and go to state 326
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 347


State 236

   87 stmt: "waituntil" "(" event_match . ")"

    ")"  shift, and go to state 348


State 237

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  129 primary-exp: "watch" "(" exp . ")"
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 349
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 238

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   88 stmt: "whenever" "(" exp . tilda.opt ")" stmt else.opt
  172 event_match: exp . "?" args.opt tilda.opt guard.opt
  175 tilda.opt: . %empty  [")"]
  176          | . "~" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 325
    "?"   shift, and go to state 326
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 350


State 239

   89 stmt: "whenever" "(" event_match . ")" stmt else.opt

    ")"  shift, and go to state 351


State 240

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   75 stmt: "every" "(" exp . ")" stmt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 352
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 241

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  116 stmt: "for" "(" "var" . "identifier" in_or_colon exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  136          | "var" . bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 353
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 121
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 242

  115 stmt: "for" "(" stmt.opt . ";" exp ";" stmt.opt ")" stmt

    ";"  shift, and go to state 354


State 243

   22 stmt.opt: stmt .

    $default  reduce using rule 22 (stmt.opt)


State 244

   24 stmt: exp .  [";"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  114 stmt: "for" "(" exp . ")" stmt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 355
    "!"   shift, and go to state 166
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 24 (stmt)


State 245

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  117 stmt: "while" "(" exp . ")" stmt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 356
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 246

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: "at" identifiers "(" . exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" . event_match ")" stmt onleave.opt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  172 event_match: . exp "?" args.opt tilda.opt guard.opt
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 357
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 358
    unary-exp    go to state 82
    rel-exp      go to state 83


State 247

  242 identifiers: identifiers "identifier" .

    $default  reduce using rule 242 (identifiers)


State 248

   28 visibility: . %empty  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   33 protos.1: . proto
   34         | . protos.1 "," proto
   36 protos: ":" . protos.1

    "private"    shift, and go to state 359
    "protected"  shift, and go to state 360
    "public"     shift, and go to state 361

    $default  reduce using rule 28 (visibility)

    visibility  go to state 362
    proto       go to state 363
    protos.1    go to state 364


State 249

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 365


State 250

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 366


State 251

   39 id.0: . %empty  ["}"]
   40     | . id.1 comma.opt
   41 id.1: . id
   42     | . id.1 "," id
   43 stmt: "enum" id "{" . id.0 "}"
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 39 (id.0)

    id.0  go to state 367
    id.1  go to state 368
    id    go to state 369


State 252

   48 stmt: "external" "var" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 370


State 253

   47 stmt: "external" "identifier" "identifier" .

    $default  reduce using rule 47 (stmt)


State 254

   49 stmt: "external" event_or_function "(" . unsigned ")" "identifier" "." "identifier" from "identifier"
  222 unsigned: . "float"

    "float"  shift, and go to state 154

    unsigned  go to state 371


State 255

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  121 primary-exp: "do" "(" exp . ")" block
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 372
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 256

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  231 claims.1: exp .  ["}", ";"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 231 (claims.1)


State 257

  125 primary-exp: "assert" "{" claims . "}"

    "}"  shift, and go to state 373


State 258

  230 claims: claims.1 . semi.opt
  232 claims.1: claims.1 . ";" exp
  257 semi.opt: . %empty  ["}"]
  258         | . ";"

    ";"  shift, and go to state 374

    $default  reduce using rule 257 (semi.opt)

    semi.opt  go to state 375


State 259

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  124 primary-exp: "assert" "(" exp . ")"
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 376
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 260

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  233 exps: . %empty  [")"]
  234     | . exps.1 comma.opt
  235 exps.1: . exp
  236       | . exps.1 "," exp
  238 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 233 (exps)

    block        go to state 67
    exp          go to state 284
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 293
    exps.1       go to state 107


State 261

  240 args.opt: args .

    $default  reduce using rule 240 (args.opt)


State 262

  140 new: "new" "identifier" args.opt .

    $default  reduce using rule 140 (new)


State 263

  166 literal-exp: "<" bitor-exps ">" .

    $default  reduce using rule 166 (literal-exp)


State 264

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  160 bitor-exps.1: bitor-exps.1 "," . bitor-exp
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  256 comma.opt: "," .  [">"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 256 (comma.opt)

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 377
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 265

  158 bitor-exps: bitor-exps.1 comma.opt .

    $default  reduce using rule 158 (bitor-exps)


State 266

   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt
   20      | cstmt "&" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "&", "|"]

    $default  reduce using rule 20 (cstmt)

    Conflict between rule 20 and token "&" resolved as reduce (%left "&").
    Conflict between rule 20 and token "|" resolved as reduce ("|" < "&").


State 267

   19 cstmt: cstmt . "|" cstmt
   19      | cstmt "|" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "|"]
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 162

    $default  reduce using rule 19 (cstmt)

    Conflict between rule 19 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 19 and token "|" resolved as reduce (%left "|").


State 268

   59 modifier: . "identifier" ":" exp
   60 modifiers: . modifier
   61          | . modifiers modifier
   62 exp: exp . "=" exp
   62    | exp "=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?"]
   63    | exp . "=" exp modifiers
   63    | exp "=" exp . modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="           shift, and go to state 164
    "in"          shift, and go to state 165
    "identifier"  shift, and go to state 378
    "!"           shift, and go to state 216
    "&&"          shift, and go to state 167
    "||"          shift, and go to state 168

    $default  reduce using rule 62 (exp)

    modifier   go to state 379
    modifiers  go to state 380

    Conflict between rule 62 and token "=" resolved as shift (ASSIGN < "=").
    Conflict between rule 62 and token "in" resolved as shift (ASSIGN < "in").
    Conflict between rule 62 and token "identifier" resolved as shift (ASSIGN < "identifier").
    Conflict between rule 62 and token "!" resolved as shift (ASSIGN < "!").
    Conflict between rule 62 and token "&&" resolved as shift (ASSIGN < "&&").
    Conflict between rule 62 and token "||" resolved as shift (ASSIGN < "||").


State 269

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  218    | exp "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  219    | exp . "!" "in" exp

    "!"  shift, and go to state 216

    "in"  error (nonassociative)

    $default  reduce using rule 218 (exp)

    Conflict between rule 218 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 218 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 218 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 218 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 218 and token "||" resolved as reduce ("||" < "in").


State 270

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  219    | exp "!" "in" . exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 381
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 271

   51 stmt: exp "!" args.opt . tilda.opt
  175 tilda.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  176          | . "~" exp

    "~"  shift, and go to state 325

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 382


State 272

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  216    | exp "&&" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "in"  shift, and go to state 165
    "!"   shift, and go to state 216

    $default  reduce using rule 216 (exp)

    Conflict between rule 216 and token "=" resolved as reduce ("=" < "&&").
    Conflict between rule 216 and token "in" resolved as shift ("&&" < "in").
    Conflict between rule 216 and token "!" resolved as shift ("&&" < "!").
    Conflict between rule 216 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 216 and token "||" resolved as reduce ("||" < "&&").


State 273

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  217    | exp "||" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "||"]
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167

    $default  reduce using rule 217 (exp)

    Conflict between rule 217 and token "=" resolved as reduce ("=" < "||").
    Conflict between rule 217 and token "in" resolved as shift ("||" < "in").
    Conflict between rule 217 and token "!" resolved as shift ("||" < "!").
    Conflict between rule 217 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 217 and token "||" resolved as reduce (%left "||").


State 274

  260 var.opt: "var" .

    $default  reduce using rule 260 (var.opt)


State 275

  249 formals.1: formal .

    $default  reduce using rule 249 (formals.1)


State 276

  250 formals.1: formals.1 . "," formal
  252 formals.0: formals.1 . comma.opt
  255 comma.opt: . %empty  [")"]
  256          | . ","

    ","  shift, and go to state 383

    $default  reduce using rule 255 (comma.opt)

    comma.opt  go to state 384


State 277

  254 formals: "(" formals.0 . ")"

    ")"  shift, and go to state 385


State 278

  246 formal: var.opt . "identifier" typespec.opt
  247       | var.opt . "identifier" "=" exp typespec.opt
  248       | var.opt . "identifier" "[" "]"

    "identifier"  shift, and go to state 386


State 279

   57 k1_id: "this" "." . "identifier"

    "identifier"  shift, and go to state 387


State 280

   58 k1_id: k1_id "." . "identifier"

    "identifier"  shift, and go to state 388


State 281

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   54 stmt: routine k1_id formals . block

    "{"  shift, and go to state 16

    block  go to state 389


State 282

  143 primary-exp: routine formals block .

    $default  reduce using rule 143 (primary-exp)


State 283

   23 stmt: primary-exp ":" stmt .

    $default  reduce using rule 23 (stmt)


State 284

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  235 exps.1: exp .  ["]", ")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 235 (exps.1)


State 285

  177 lvalue: primary-exp "[" exps . "]"

    "]"  shift, and go to state 390


State 286

  134 primary-exp: primary-exp "." "&" . id
  135 id: . "identifier"
  142   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 391


State 287

  132 lvalue: primary-exp "." "*" .

    $default  reduce using rule 132 (lvalue)


State 288

  222 unsigned: . "float"
  227 lvalue: primary-exp "." "%id:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 392


State 289

  131 lvalue: primary-exp "." id .

    $default  reduce using rule 131 (lvalue)


State 290

  131 lvalue: primary-exp . "." id
  132       | primary-exp . "." "*"
  134 primary-exp: primary-exp . "." "&" id
  177 lvalue: primary-exp . "[" exps "]"
  183 primary-exp: primary-exp . "**" primary-exp
  183            | primary-exp "**" primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  227 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 183 (primary-exp)

    Conflict between rule 183 and token "[" resolved as shift ("**" < "[").
    Conflict between rule 183 and token "." resolved as shift ("**" < ".").
    Conflict between rule 183 and token "**" resolved as shift (%right "**").


State 291

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  126 primary-exp: detach "(" exp . ")"
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 393
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 292

  222 unsigned: . "float"
  228 primary-exp: lvalue "(" "%exps:" . unsigned ")"

    "float"  shift, and go to state 154

    unsigned  go to state 394


State 293

  238 args: "(" exps . ")"

    ")"  shift, and go to state 395


State 294

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   68    | lvalue "^=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 68 (exp)

    Conflict between rule 68 and token "=" resolved as shift (%right "=").
    Conflict between rule 68 and token "in" resolved as shift ("^=" < "in").
    Conflict between rule 68 and token "!" resolved as shift ("^=" < "!").
    Conflict between rule 68 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 68 and token "||" resolved as shift ("^=" < "||").


State 295

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   65    | lvalue "-=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 65 (exp)

    Conflict between rule 65 and token "=" resolved as shift (%right "=").
    Conflict between rule 65 and token "in" resolved as shift ("-=" < "in").
    Conflict between rule 65 and token "!" resolved as shift ("-=" < "!").
    Conflict between rule 65 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 65 and token "||" resolved as shift ("-=" < "||").


State 296

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   69    | lvalue "%=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 69 (exp)

    Conflict between rule 69 and token "=" resolved as shift (%right "=").
    Conflict between rule 69 and token "in" resolved as shift ("%=" < "in").
    Conflict between rule 69 and token "!" resolved as shift ("%=" < "!").
    Conflict between rule 69 and token "&&" resolved as shift ("%=" < "&&").
    Conflict between rule 69 and token "||" resolved as shift ("%=" < "||").


State 297

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   64    | lvalue "+=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 64 (exp)

    Conflict between rule 64 and token "=" resolved as shift (%right "=").
    Conflict between rule 64 and token "in" resolved as shift ("+=" < "in").
    Conflict between rule 64 and token "!" resolved as shift ("+=" < "!").
    Conflict between rule 64 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 64 and token "||" resolved as shift ("+=" < "||").


State 298

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   67    | lvalue "/=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 67 (exp)

    Conflict between rule 67 and token "=" resolved as shift (%right "=").
    Conflict between rule 67 and token "in" resolved as shift ("/=" < "in").
    Conflict between rule 67 and token "!" resolved as shift ("/=" < "!").
    Conflict between rule 67 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 67 and token "||" resolved as shift ("/=" < "||").


State 299

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   66    | lvalue "*=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 66 (exp)

    Conflict between rule 66 and token "=" resolved as shift (%right "=").
    Conflict between rule 66 and token "in" resolved as shift ("*=" < "in").
    Conflict between rule 66 and token "!" resolved as shift ("*=" < "!").
    Conflict between rule 66 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 66 and token "||" resolved as shift ("*=" < "||").


State 300

   72 primary-exp: lvalue "->" id .

    $default  reduce using rule 72 (primary-exp)


State 301

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   55 stmt: id id formals . block

    "{"  shift, and go to state 16

    block  go to state 396


State 302

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp "bitand" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    ">>"  shift, and go to state 195
    "<<"  shift, and go to state 196
    "-"   shift, and go to state 197
    "%"   shift, and go to state 198
    "+"   shift, and go to state 199
    "/"   shift, and go to state 200
    "*"   shift, and go to state 201

    $default  reduce using rule 199 (bitor-exp)

    Conflict between rule 199 and token "bitand" resolved as reduce (%left "bitand").
    Conflict between rule 199 and token "bitor" resolved as reduce ("bitor" < "bitand").
    Conflict between rule 199 and token "^" resolved as reduce ("^" < "bitand").
    Conflict between rule 199 and token ">>" resolved as shift ("bitand" < ">>").
    Conflict between rule 199 and token "<<" resolved as shift ("bitand" < "<<").
    Conflict between rule 199 and token "-" resolved as shift ("bitand" < "-").
    Conflict between rule 199 and token "%" resolved as shift ("bitand" < "%").
    Conflict between rule 199 and token "+" resolved as shift ("bitand" < "+").
    Conflict between rule 199 and token "/" resolved as shift ("bitand" < "/").
    Conflict between rule 199 and token "*" resolved as shift ("bitand" < "*").


State 303

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp "bitor" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 200 (bitor-exp)

    Conflict between rule 200 and token "bitand" resolved as shift ("bitor" < "bitand").
    Conflict between rule 200 and token "bitor" resolved as reduce (%left "bitor").
    Conflict between rule 200 and token "^" resolved as shift ("bitor" < "^").
    Conflict between rule 200 and token ">>" resolved as shift ("bitor" < ">>").
    Conflict between rule 200 and token "<<" resolved as shift ("bitor" < "<<").
    Conflict between rule 200 and token "-" resolved as shift ("bitor" < "-").
    Conflict between rule 200 and token "%" resolved as shift ("bitor" < "%").
    Conflict between rule 200 and token "+" resolved as shift ("bitor" < "+").
    Conflict between rule 200 and token "/" resolved as shift ("bitor" < "/").
    Conflict between rule 200 and token "*" resolved as shift ("bitor" < "*").


State 304

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  197          | bitor-exp "^" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 197 (bitor-exp)

    Conflict between rule 197 and token "bitand" resolved as shift ("^" < "bitand").
    Conflict between rule 197 and token "bitor" resolved as reduce ("bitor" < "^").
    Conflict between rule 197 and token "^" resolved as reduce (%left "^").
    Conflict between rule 197 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 197 and token "<<" resolved as shift ("^" < "<<").
    Conflict between rule 197 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 197 and token "%" resolved as shift ("^" < "%").
    Conflict between rule 197 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 197 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 197 and token "*" resolved as shift ("^" < "*").


State 305

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp
  201          | bitor-exp ">>" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "-"  shift, and go to state 197
    "%"  shift, and go to state 198
    "+"  shift, and go to state 199
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 201 (bitor-exp)

    Conflict between rule 201 and token "bitand" resolved as reduce ("bitand" < ">>").
    Conflict between rule 201 and token "bitor" resolved as reduce ("bitor" < ">>").
    Conflict between rule 201 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 201 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 201 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 201 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 201 and token "%" resolved as shift (">>" < "%").
    Conflict between rule 201 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 201 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 201 and token "*" resolved as shift (">>" < "*").


State 306

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp "<<" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "-"  shift, and go to state 197
    "%"  shift, and go to state 198
    "+"  shift, and go to state 199
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 198 (bitor-exp)

    Conflict between rule 198 and token "bitand" resolved as reduce ("bitand" < "<<").
    Conflict between rule 198 and token "bitor" resolved as reduce ("bitor" < "<<").
    Conflict between rule 198 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 198 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 198 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 198 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 198 and token "%" resolved as shift ("<<" < "%").
    Conflict between rule 198 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 198 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 198 and token "*" resolved as shift ("<<" < "*").


State 307

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  193          | bitor-exp "-" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 198
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 193 (bitor-exp)

    Conflict between rule 193 and token "bitand" resolved as reduce ("bitand" < "-").
    Conflict between rule 193 and token "bitor" resolved as reduce ("bitor" < "-").
    Conflict between rule 193 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 193 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 193 and token "<<" resolved as reduce ("<<" < "-").
    Conflict between rule 193 and token "-" resolved as reduce (%left "-").
    Conflict between rule 193 and token "%" resolved as shift ("-" < "%").
    Conflict between rule 193 and token "+" resolved as reduce (%left "+").
    Conflict between rule 193 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 193 and token "*" resolved as shift ("-" < "*").


State 308

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  196          | bitor-exp "%" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 196 (bitor-exp)

    Conflict between rule 196 and token "bitand" resolved as reduce ("bitand" < "%").
    Conflict between rule 196 and token "bitor" resolved as reduce ("bitor" < "%").
    Conflict between rule 196 and token "^" resolved as reduce ("^" < "%").
    Conflict between rule 196 and token ">>" resolved as reduce (">>" < "%").
    Conflict between rule 196 and token "<<" resolved as reduce ("<<" < "%").
    Conflict between rule 196 and token "-" resolved as reduce ("-" < "%").
    Conflict between rule 196 and token "%" resolved as reduce (%left "%").
    Conflict between rule 196 and token "+" resolved as reduce ("+" < "%").
    Conflict between rule 196 and token "/" resolved as reduce (%left "/").
    Conflict between rule 196 and token "*" resolved as reduce (%left "*").


State 309

  192 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp "+" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 198
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 192 (bitor-exp)

    Conflict between rule 192 and token "bitand" resolved as reduce ("bitand" < "+").
    Conflict between rule 192 and token "bitor" resolved as reduce ("bitor" < "+").
    Conflict between rule 192 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 192 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 192 and token "<<" resolved as reduce ("<<" < "+").
    Conflict between rule 192 and token "-" resolved as reduce (%left "-").
    Conflict between rule 192 and token "%" resolved as shift ("+" < "%").
    Conflict between rule 192 and token "+" resolved as reduce (%left "+").
    Conflict between rule 192 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 192 and token "*" resolved as shift ("+" < "*").


State 310

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  195          | bitor-exp "/" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 195 (bitor-exp)

    Conflict between rule 195 and token "bitand" resolved as reduce ("bitand" < "/").
    Conflict between rule 195 and token "bitor" resolved as reduce ("bitor" < "/").
    Conflict between rule 195 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 195 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 195 and token "<<" resolved as reduce ("<<" < "/").
    Conflict between rule 195 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 195 and token "%" resolved as reduce (%left "%").
    Conflict between rule 195 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 195 and token "/" resolved as reduce (%left "/").
    Conflict between rule 195 and token "*" resolved as reduce (%left "*").


State 311

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  194          | bitor-exp "*" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 194 (bitor-exp)

    Conflict between rule 194 and token "bitand" resolved as reduce ("bitand" < "*").
    Conflict between rule 194 and token "bitor" resolved as reduce ("bitor" < "*").
    Conflict between rule 194 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 194 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 194 and token "<<" resolved as reduce ("<<" < "*").
    Conflict between rule 194 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 194 and token "%" resolved as reduce (%left "%").
    Conflict between rule 194 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 194 and token "/" resolved as reduce (%left "/").
    Conflict between rule 194 and token "*" resolved as reduce (%left "*").


State 312

  208 rel-op: "=~=" .

    $default  reduce using rule 208 (rel-op)


State 313

  206 rel-op: "==" .

    $default  reduce using rule 206 (rel-op)


State 314

  207 rel-op: "===" .

    $default  reduce using rule 207 (rel-op)


State 315

  210 rel-op: ">=" .

    $default  reduce using rule 210 (rel-op)


State 316

  209 rel-op: ">" .

    $default  reduce using rule 209 (rel-op)


State 317

  205 rel-op: "<=" .

    $default  reduce using rule 205 (rel-op)


State 318

  204 rel-op: "<" .

    $default  reduce using rule 204 (rel-op)


State 319

  202 rel-op: "!=" .

    $default  reduce using rule 202 (rel-op)


State 320

  203 rel-op: "!==" .

    $default  reduce using rule 203 (rel-op)


State 321

  211 rel-op: "~=" .

    $default  reduce using rule 211 (rel-op)


State 322

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  214 rel-ops: rel-ops rel-op . bitor-exp
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 397
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


State 323

   14 stmts: stmts "," cstmt.opt .

    $default  reduce using rule 14 (stmts)


State 324

   13 stmts: stmts ";" cstmt.opt .

    $default  reduce using rule 13 (stmts)


State 325

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  176 tilda.opt: "~" . exp
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 398
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 326

  172 event_match: exp "?" . args.opt tilda.opt guard.opt
  238 args: . "(" exps ")"
  239 args.opt: . %empty  ["if", ")", "~"]
  240         | . args

    "("  shift, and go to state 260

    $default  reduce using rule 239 (args.opt)

    args      go to state 261
    args.opt  go to state 399


State 327

   77 stmt: "freezeif" "(" exp tilda.opt . ")" stmt

    ")"  shift, and go to state 400


State 328

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   78     | "freezeif" "(" event_match ")" . stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 401
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 329

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" stmts ")" . stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 402
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 330

  128 primary-exp: "isdef" "(" k1_id ")" .

    $default  reduce using rule 128 (primary-exp)


State 331

   27 block: "{" id "~" id . "}"

    "}"  shift, and go to state 403


State 332

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  147 assoc: exp "=>" exp .  ["]", ","]
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 147 (assoc)


State 333

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  147 assoc: exp . "=>" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "=>"  shift, and go to state 215
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 334

  149 assocs.1: assocs.1 "," assoc .

    $default  reduce using rule 149 (assocs.1)


State 335

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  236 exps.1: exps.1 "," exp .  ["]", ")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 236 (exps.1)


State 336

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  236 exps.1: exps.1 "," exp .  [","]
  237 exps.2: exps.1 "," exp .  [")"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    ")"       reduce using rule 237 (exps.2)
    $default  reduce using rule 236 (exps.1)


State 337

   79 stmt: "stopif" "(" exp tilda.opt . ")" stmt

    ")"  shift, and go to state 404


State 338

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   80     | "stopif" "(" event_match ")" . stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 405
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 339

   81 stmt: "switch" "(" exp ")" . "{" cases default.opt "}"

    "{"  shift, and go to state 406


State 340

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   82     | "timeout" "(" exp ")" . stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 407
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 341

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  101 match: . exp
  102      | . exp "if" exp
  104 match.opt: "(" . match ")"
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 408
    routine      go to state 100
    primary-exp  go to state 101
    match        go to state 409
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 342

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  105 catch: "catch" match.opt . block

    "{"  shift, and go to state 16

    block  go to state 410


State 343

  111 stmt: "try" block "finally" block .

    $default  reduce using rule 111 (stmt)


State 344

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
   93 else.opt: "else" . stmt
  110 stmt: . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 411
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 345

  108 finally.opt: . %empty  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  109            | . "finally" block
  110 stmt: "try" block catches.1 else.opt . finally.opt

    "finally"  shift, and go to state 412

    $default  reduce using rule 108 (finally.opt)

    finally.opt  go to state 413

    Conflict between rule 108 and token "finally" resolved as shift (EMPTY < "finally").


State 346

  100 catches.1: catches.1 catch .

    $default  reduce using rule 100 (catches.1)


State 347

   86 stmt: "waituntil" "(" exp tilda.opt . ")"

    ")"  shift, and go to state 414


State 348

   87 stmt: "waituntil" "(" event_match ")" .

    $default  reduce using rule 87 (stmt)


State 349

  129 primary-exp: "watch" "(" exp ")" .

    $default  reduce using rule 129 (primary-exp)


State 350

   88 stmt: "whenever" "(" exp tilda.opt . ")" stmt else.opt

    ")"  shift, and go to state 415


State 351

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
   89     | "whenever" "(" event_match ")" . stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 416
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 352

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   75     | "every" "(" exp ")" . stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 417
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 353

  116 stmt: "for" "(" "var" "identifier" . in_or_colon exp ")" stmt
  118 in_or_colon: . "in"
  119            | . ":"
  135 id: "identifier" .  ["=", "[", "(", ".", ")", ";", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    ":"   shift, and go to state 418
    "in"  shift, and go to state 419

    $default  reduce using rule 135 (id)

    in_or_colon  go to state 420

    Conflict between rule 135 and token "in" resolved as shift ("identifier" < "in").


State 354

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  115 stmt: "for" "(" stmt.opt ";" . exp ";" stmt.opt ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 421
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 355

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  114     | "for" "(" exp ")" . stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 422
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 356

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  117     | "while" "(" exp ")" . stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 423
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 357

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   73 stmt: "at" identifiers "(" exp . tilda.opt ")" stmt onleave.opt
  172 event_match: exp . "?" args.opt tilda.opt guard.opt
  175 tilda.opt: . %empty  [")"]
  176          | . "~" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 325
    "?"   shift, and go to state 326
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 424


State 358

   74 stmt: "at" identifiers "(" event_match . ")" stmt onleave.opt

    ")"  shift, and go to state 425


State 359

   29 visibility: "private" .

    $default  reduce using rule 29 (visibility)


State 360

   30 visibility: "protected" .

    $default  reduce using rule 30 (visibility)


State 361

   31 visibility: "public" .

    $default  reduce using rule 31 (visibility)


State 362

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   32 proto: visibility . exp
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 426
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 363

   33 protos.1: proto .

    $default  reduce using rule 33 (protos.1)


State 364

   34 protos.1: protos.1 . "," proto
   36 protos: ":" protos.1 .  ["{"]

    ","  shift, and go to state 427

    $default  reduce using rule 36 (protos)


State 365

   37 exp: "class" lvalue protos block .

    $default  reduce using rule 37 (exp)


State 366

   38 exp: "package" lvalue protos block .

    $default  reduce using rule 38 (exp)


State 367

   43 stmt: "enum" id "{" id.0 . "}"

    "}"  shift, and go to state 428


State 368

   40 id.0: id.1 . comma.opt
   42 id.1: id.1 . "," id
  255 comma.opt: . %empty  ["}"]
  256          | . ","

    ","  shift, and go to state 429

    $default  reduce using rule 255 (comma.opt)

    comma.opt  go to state 430


State 369

   41 id.1: id .

    $default  reduce using rule 41 (id.1)


State 370

   48 stmt: "external" "var" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 431


State 371

   49 stmt: "external" event_or_function "(" unsigned . ")" "identifier" "." "identifier" from "identifier"

    ")"  shift, and go to state 432


State 372

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  121 primary-exp: "do" "(" exp ")" . block

    "{"  shift, and go to state 16

    block  go to state 433


State 373

  125 primary-exp: "assert" "{" claims "}" .

    $default  reduce using rule 125 (primary-exp)


State 374

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  232 claims.1: claims.1 ";" . exp
  258 semi.opt: ";" .  ["}"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 258 (semi.opt)

    block        go to state 67
    exp          go to state 434
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 375

  230 claims: claims.1 semi.opt .

    $default  reduce using rule 230 (claims)


State 376

  124 primary-exp: "assert" "(" exp ")" .

    $default  reduce using rule 124 (primary-exp)


State 377

  160 bitor-exps.1: bitor-exps.1 "," bitor-exp .  [",", ">"]
  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 160 (bitor-exps.1)


State 378

   59 modifier: "identifier" . ":" exp

    ":"  shift, and go to state 435


State 379

   60 modifiers: modifier .

    $default  reduce using rule 60 (modifiers)


State 380

   59 modifier: . "identifier" ":" exp
   61 modifiers: modifiers . modifier
   63 exp: exp "=" exp modifiers .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?", "!", "&&", "||"]

    "identifier"  shift, and go to state 378

    $default  reduce using rule 63 (exp)

    modifier  go to state 436

    Conflict between rule 63 and token "identifier" resolved as shift (ASSIGN < "identifier").


State 381

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  219    | exp "!" "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]

    "!"  shift, and go to state 216

    "in"  error (nonassociative)

    $default  reduce using rule 219 (exp)

    Conflict between rule 219 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 219 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 219 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 219 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 219 and token "||" resolved as reduce ("||" < "in").


State 382

   51 stmt: exp "!" args.opt tilda.opt .

    $default  reduce using rule 51 (stmt)


State 383

  246 formal: . var.opt "identifier" typespec.opt
  247       | . var.opt "identifier" "=" exp typespec.opt
  248       | . var.opt "identifier" "[" "]"
  250 formals.1: formals.1 "," . formal
  256 comma.opt: "," .  [")"]
  259 var.opt: . %empty  ["identifier"]
  260        | . "var"

    "var"  shift, and go to state 274

    "identifier"  reduce using rule 259 (var.opt)
    $default      reduce using rule 256 (comma.opt)

    formal   go to state 437
    var.opt  go to state 278


State 384

  252 formals.0: formals.1 comma.opt .

    $default  reduce using rule 252 (formals.0)


State 385

  254 formals: "(" formals.0 ")" .

    $default  reduce using rule 254 (formals)


State 386

  243 typespec: . ":" exp
  244 typespec.opt: . %empty  [")", ","]
  245             | . typespec
  246 formal: var.opt "identifier" . typespec.opt
  247       | var.opt "identifier" . "=" exp typespec.opt
  248       | var.opt "identifier" . "[" "]"

    "="  shift, and go to state 438
    ":"  shift, and go to state 439
    "["  shift, and go to state 440

    $default  reduce using rule 244 (typespec.opt)

    typespec      go to state 441
    typespec.opt  go to state 442


State 387

   57 k1_id: "this" "." "identifier" .

    $default  reduce using rule 57 (k1_id)


State 388

   58 k1_id: k1_id "." "identifier" .

    $default  reduce using rule 58 (k1_id)


State 389

   54 stmt: routine k1_id formals block .

    $default  reduce using rule 54 (stmt)


State 390

  177 lvalue: primary-exp "[" exps "]" .

    $default  reduce using rule 177 (lvalue)


State 391

  134 primary-exp: primary-exp "." "&" id .

    $default  reduce using rule 134 (primary-exp)


State 392

  227 lvalue: primary-exp "." "%id:" unsigned .

    $default  reduce using rule 227 (lvalue)


State 393

  126 primary-exp: detach "(" exp ")" .

    $default  reduce using rule 126 (primary-exp)


State 394

  228 primary-exp: lvalue "(" "%exps:" unsigned . ")"

    ")"  shift, and go to state 443


State 395

  238 args: "(" exps ")" .

    $default  reduce using rule 238 (args)


State 396

   55 stmt: id id formals block .

    $default  reduce using rule 55 (stmt)


State 397

  192 bitor-exp: bitor-exp . "+" bitor-exp
  193          | bitor-exp . "-" bitor-exp
  194          | bitor-exp . "*" bitor-exp
  195          | bitor-exp . "/" bitor-exp
  196          | bitor-exp . "%" bitor-exp
  197          | bitor-exp . "^" bitor-exp
  198          | bitor-exp . "<<" bitor-exp
  199          | bitor-exp . "bitand" bitor-exp
  200          | bitor-exp . "bitor" bitor-exp
  201          | bitor-exp . ">>" bitor-exp
  214 rel-ops: rel-ops rel-op bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 214 (rel-ops)


State 398

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  176 tilda.opt: "~" exp .  ["end of command", "case", "catch", "default", "else", "finally", "if", "onleave", "}", ")", ",", ";", "&", "|"]
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 176 (tilda.opt)


State 399

  172 event_match: exp "?" args.opt . tilda.opt guard.opt
  175 tilda.opt: . %empty  ["if", ")"]
  176          | . "~" exp

    "~"  shift, and go to state 325

    $default  reduce using rule 175 (tilda.opt)

    tilda.opt  go to state 444


State 400

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   77     | "freezeif" "(" exp tilda.opt ")" . stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 445
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 401

   78 stmt: "freezeif" "(" event_match ")" stmt .

    $default  reduce using rule 78 (stmt)


State 402

   76 stmt: "if" "(" stmts ")" stmt . else.opt
   92 else.opt: . %empty  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   93         | . "else" stmt

    "else"  shift, and go to state 344

    $default  reduce using rule 92 (else.opt)

    else.opt  go to state 446

    Conflict between rule 92 and token "else" resolved as shift (EMPTY < "else").


State 403

   27 block: "{" id "~" id "}" .

    $default  reduce using rule 27 (block)


State 404

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   79     | "stopif" "(" exp tilda.opt ")" . stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 447
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 405

   80 stmt: "stopif" "(" event_match ")" stmt .

    $default  reduce using rule 80 (stmt)


State 406

   81 stmt: "switch" "(" exp ")" "{" . cases default.opt "}"
   96 cases: . %empty
   97      | . cases case

    $default  reduce using rule 96 (cases)

    cases  go to state 448


State 407

   82 stmt: "timeout" "(" exp ")" stmt . catch.opt else.opt finally.opt
  106 catch.opt: . %empty  ["end of command", "case", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  107          | . "catch" block

    "catch"  shift, and go to state 449

    $default  reduce using rule 106 (catch.opt)

    catch.opt  go to state 450

    Conflict between rule 106 and token "catch" resolved as shift (EMPTY < "catch").


State 408

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  101 match: exp .  [":", ")"]
  102      | exp . "if" exp
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "if"  shift, and go to state 451
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 101 (match)


State 409

  104 match.opt: "(" match . ")"

    ")"  shift, and go to state 452


State 410

  105 catch: "catch" match.opt block .

    $default  reduce using rule 105 (catch)


State 411

   93 else.opt: "else" stmt .

    $default  reduce using rule 93 (else.opt)


State 412

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  109 finally.opt: "finally" . block

    "{"  shift, and go to state 16

    block  go to state 453


State 413

  110 stmt: "try" block catches.1 else.opt finally.opt .

    $default  reduce using rule 110 (stmt)


State 414

   86 stmt: "waituntil" "(" exp tilda.opt ")" .

    $default  reduce using rule 86 (stmt)


State 415

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   88     | "whenever" "(" exp tilda.opt ")" . stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 454
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 416

   89 stmt: "whenever" "(" event_match ")" stmt . else.opt
   92 else.opt: . %empty  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   93         | . "else" stmt

    "else"  shift, and go to state 344

    $default  reduce using rule 92 (else.opt)

    else.opt  go to state 455

    Conflict between rule 92 and token "else" resolved as shift (EMPTY < "else").


State 417

   75 stmt: "every" "(" exp ")" stmt .

    $default  reduce using rule 75 (stmt)


State 418

  119 in_or_colon: ":" .

    $default  reduce using rule 119 (in_or_colon)


State 419

  118 in_or_colon: "in" .

    $default  reduce using rule 118 (in_or_colon)


State 420

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  116 stmt: "for" "(" "var" "identifier" in_or_colon . exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 456
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 421

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  115 stmt: "for" "(" stmt.opt ";" exp . ";" stmt.opt ")" stmt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ";"   shift, and go to state 457
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 422

  114 stmt: "for" "(" exp ")" stmt .

    $default  reduce using rule 114 (stmt)


State 423

  117 stmt: "while" "(" exp ")" stmt .

    $default  reduce using rule 117 (stmt)


State 424

   73 stmt: "at" identifiers "(" exp tilda.opt . ")" stmt onleave.opt

    ")"  shift, and go to state 458


State 425

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" . stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 459
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 426

   32 proto: visibility exp .  ["{", ","]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 32 (proto)


State 427

   28 visibility: . %empty  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   34 protos.1: protos.1 "," . proto

    "private"    shift, and go to state 359
    "protected"  shift, and go to state 360
    "public"     shift, and go to state 361

    $default  reduce using rule 28 (visibility)

    visibility  go to state 362
    proto       go to state 460


State 428

   43 stmt: "enum" id "{" id.0 "}" .

    $default  reduce using rule 43 (stmt)


State 429

   42 id.1: id.1 "," . id
  135 id: . "identifier"
  142   | . "new"
  256 comma.opt: "," .  ["}"]

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 256 (comma.opt)

    id  go to state 461


State 430

   40 id.0: id.1 comma.opt .

    $default  reduce using rule 40 (id.0)


State 431

   44 from: . "identifier"
   48 stmt: "external" "var" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 462

    from  go to state 463


State 432

   49 stmt: "external" event_or_function "(" unsigned ")" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 464


State 433

  121 primary-exp: "do" "(" exp ")" block .

    $default  reduce using rule 121 (primary-exp)


State 434

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  232 claims.1: claims.1 ";" exp .  ["}", ";"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 232 (claims.1)


State 435

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   59 modifier: "identifier" ":" . exp
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 465
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 436

   61 modifiers: modifiers modifier .

    $default  reduce using rule 61 (modifiers)


State 437

  250 formals.1: formals.1 "," formal .

    $default  reduce using rule 250 (formals.1)


State 438

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  247 formal: var.opt "identifier" "=" . exp typespec.opt

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 466
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 439

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  243 typespec: ":" . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 467
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 440

  248 formal: var.opt "identifier" "[" . "]"

    "]"  shift, and go to state 468


State 441

  245 typespec.opt: typespec .

    $default  reduce using rule 245 (typespec.opt)


State 442

  246 formal: var.opt "identifier" typespec.opt .

    $default  reduce using rule 246 (formal)


State 443

  228 primary-exp: lvalue "(" "%exps:" unsigned ")" .

    $default  reduce using rule 228 (primary-exp)


State 444

  172 event_match: exp "?" args.opt tilda.opt . guard.opt
  173 guard.opt: . %empty  [")"]
  174          | . "if" exp

    "if"  shift, and go to state 469

    $default  reduce using rule 173 (guard.opt)

    guard.opt  go to state 470


State 445

   77 stmt: "freezeif" "(" exp tilda.opt ")" stmt .

    $default  reduce using rule 77 (stmt)


State 446

   76 stmt: "if" "(" stmts ")" stmt else.opt .

    $default  reduce using rule 76 (stmt)


State 447

   79 stmt: "stopif" "(" exp tilda.opt ")" stmt .

    $default  reduce using rule 79 (stmt)


State 448

   81 stmt: "switch" "(" exp ")" "{" cases . default.opt "}"
   90 default.opt: . %empty  ["}"]
   91            | . "default" ":" stmts
   97 cases: cases . case
   98 case: . "case" match ":" stmts

    "case"     shift, and go to state 471
    "default"  shift, and go to state 472

    $default  reduce using rule 90 (default.opt)

    default.opt  go to state 473
    case         go to state 474


State 449

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  107 catch.opt: "catch" . block

    "{"  shift, and go to state 16

    block  go to state 475


State 450

   82 stmt: "timeout" "(" exp ")" stmt catch.opt . else.opt finally.opt
   92 else.opt: . %empty  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   93         | . "else" stmt

    "else"  shift, and go to state 344

    $default  reduce using rule 92 (else.opt)

    else.opt  go to state 476

    Conflict between rule 92 and token "else" resolved as shift (EMPTY < "else").


State 451

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  102 match: exp "if" . exp
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 477
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 452

  104 match.opt: "(" match ")" .

    $default  reduce using rule 104 (match.opt)


State 453

  109 finally.opt: "finally" block .

    $default  reduce using rule 109 (finally.opt)


State 454

   88 stmt: "whenever" "(" exp tilda.opt ")" stmt . else.opt
   92 else.opt: . %empty  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   93         | . "else" stmt

    "else"  shift, and go to state 344

    $default  reduce using rule 92 (else.opt)

    else.opt  go to state 478

    Conflict between rule 92 and token "else" resolved as shift (EMPTY < "else").


State 455

   89 stmt: "whenever" "(" event_match ")" stmt else.opt .

    $default  reduce using rule 89 (stmt)


State 456

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  116 stmt: "for" "(" "var" "identifier" in_or_colon exp . ")" stmt
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 479
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


State 457

   21 stmt.opt: . %empty  [")"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  115     | "for" "(" stmt.opt ";" exp ";" . stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 480
    stmt         go to state 243
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 458

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   73     | "at" identifiers "(" exp tilda.opt ")" . stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 481
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 459

   74 stmt: "at" identifiers "(" event_match ")" stmt . onleave.opt
   94 onleave.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   95            | . "onleave" stmt

    "onleave"  shift, and go to state 482

    $default  reduce using rule 94 (onleave.opt)

    onleave.opt  go to state 483

    Conflict between rule 94 and token "onleave" resolved as shift (EMPTY < "onleave").


State 460

   34 protos.1: protos.1 "," proto .

    $default  reduce using rule 34 (protos.1)


State 461

   42 id.1: id.1 "," id .

    $default  reduce using rule 42 (id.1)


State 462

   44 from: "identifier" .

    $default  reduce using rule 44 (from)


State 463

   48 stmt: "external" "var" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 484


State 464

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 485


State 465

   59 modifier: "identifier" ":" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 59 (modifier)

    Conflict between rule 59 and token "=" resolved as shift (":" < "=").
    Conflict between rule 59 and token "in" resolved as shift (":" < "in").
    Conflict between rule 59 and token "!" resolved as shift (":" < "!").
    Conflict between rule 59 and token "&&" resolved as shift (":" < "&&").
    Conflict between rule 59 and token "||" resolved as shift (":" < "||").


State 466

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  243 typespec: . ":" exp
  244 typespec.opt: . %empty  [")", ","]
  245             | . typespec
  247 formal: var.opt "identifier" "=" exp . typespec.opt

    "="   shift, and go to state 164
    ":"   shift, and go to state 439
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 244 (typespec.opt)

    typespec      go to state 441
    typespec.opt  go to state 486


State 467

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  216    | exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp
  243 typespec: ":" exp .  [")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 243 (typespec)


State 468

  248 formal: var.opt "identifier" "[" "]" .

    $default  reduce using rule 248 (formal)


State 469

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  120            | . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  174 guard.opt: "if" . exp
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 487
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 470

  172 event_match: exp "?" args.opt tilda.opt guard.opt .

    $default  reduce using rule 172 (event_match)


State 471

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   98 case: "case" . match ":" stmts
  101 match: . exp
  102      | . exp "if" exp
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 408
    routine      go to state 100
    primary-exp  go to state 101
    match        go to state 488
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 472

   91 default.opt: "default" . ":" stmts

    ":"  shift, and go to state 489


State 473

   81 stmt: "switch" "(" exp ")" "{" cases default.opt . "}"

    "}"  shift, and go to state 490


State 474

   97 cases: cases case .

    $default  reduce using rule 97 (cases)


State 475

  107 catch.opt: "catch" block .

    $default  reduce using rule 107 (catch.opt)


State 476

   82 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt . finally.opt
  108 finally.opt: . %empty  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  109            | . "finally" block

    "finally"  shift, and go to state 412

    $default  reduce using rule 108 (finally.opt)

    finally.opt  go to state 491

    Conflict between rule 108 and token "finally" resolved as shift (EMPTY < "finally").


State 477

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  102 match: exp "if" exp .  [":", ")"]
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 102 (match)


State 478

   88 stmt: "whenever" "(" exp tilda.opt ")" stmt else.opt .

    $default  reduce using rule 88 (stmt)


State 479

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  116     | "for" "(" "var" "identifier" in_or_colon exp ")" . stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 492
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 480

  115 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt . ")" stmt

    ")"  shift, and go to state 493


State 481

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt . onleave.opt
   94 onleave.opt: . %empty  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   95            | . "onleave" stmt

    "onleave"  shift, and go to state 482

    $default  reduce using rule 94 (onleave.opt)

    onleave.opt  go to state 494

    Conflict between rule 94 and token "onleave" resolved as shift (EMPTY < "onleave").


State 482

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
   95 onleave.opt: "onleave" . stmt
  110 stmt: . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 495
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 483

   74 stmt: "at" identifiers "(" event_match ")" stmt onleave.opt .

    $default  reduce using rule 74 (stmt)


State 484

   48 stmt: "external" "var" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 48 (stmt)


State 485

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 496


State 486

  247 formal: var.opt "identifier" "=" exp typespec.opt .

    $default  reduce using rule 247 (formal)


State 487

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  174 guard.opt: "if" exp .  [")"]
  216 exp: exp . "&&" exp
  217    | exp . "||" exp
  218    | exp . "in" exp
  219    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 216
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 174 (guard.opt)


State 488

   98 case: "case" match . ":" stmts

    ":"  shift, and go to state 497


State 489

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: . %empty  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
   91 default.opt: "default" ":" . stmts
  110 stmt: . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 498
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 490

   81 stmt: "switch" "(" exp ")" "{" cases default.opt "}" .

    $default  reduce using rule 81 (stmt)


State 491

   82 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt .

    $default  reduce using rule 82 (stmt)


State 492

  116 stmt: "for" "(" "var" "identifier" in_or_colon exp ")" stmt .

    $default  reduce using rule 116 (stmt)


State 493

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
  110     | . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  115     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" . stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 499
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 494

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt .

    $default  reduce using rule 73 (stmt)


State 495

   95 onleave.opt: "onleave" stmt .

    $default  reduce using rule 95 (onleave.opt)


State 496

   44 from: . "identifier"
   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 462

    from  go to state 500


State 497

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: . %empty  ["case", "default", "}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp tilda.opt ")" stmt
   78     | . "freezeif" "(" event_match ")" stmt
   79     | . "stopif" "(" exp tilda.opt ")" stmt
   80     | . "stopif" "(" event_match ")" stmt
   81     | . "switch" "(" exp ")" "{" cases default.opt "}"
   82     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   83     | . "return" exp.opt
   84     | . "break"
   85     | . "continue"
   86     | . "waituntil" "(" exp tilda.opt ")"
   87     | . "waituntil" "(" event_match ")"
   88     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   89     | . "whenever" "(" event_match ")" stmt else.opt
   98 case: "case" match ":" . stmts
  110 stmt: . "try" block catches.1 else.opt finally.opt
  111     | . "try" block "finally" block
  112     | . "throw" exp.opt
  113     | . "loop" stmt
  114     | . "for" "(" exp ")" stmt
  115     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  116     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  117     | . "while" "(" exp ")" stmt
  120 primary-exp: . block
  121            | . "do" "(" exp ")" block
  122 detach: . "detach"
  123       | . "disown"
  124 primary-exp: . "assert" "(" exp ")"
  125            | . "assert" "{" claims "}"
  126            | . detach "(" exp ")"
  127            | . detach block
  128            | . "isdef" "(" k1_id ")"
  129            | . "watch" "(" exp ")"
  130 lvalue: . id
  131       | . primary-exp "." id
  132       | . primary-exp "." "*"
  133 primary-exp: . "&" id
  134            | . primary-exp "." "&" id
  135 id: . "identifier"
  136 bitor-exp: . "var" bitor-exp
  137          | . "const" "var" bitor-exp
  138 primary-exp: . lvalue
  139            | . lvalue args
  140 new: . "new" "identifier" args.opt
  141 bitor-exp: . new
  142 id: . "new"
  143 primary-exp: . routine formals block
  144 float-exp: . "float"
  145 duration: . "duration"
  146         | . duration "duration"
  152 dictionary: . "[" assocs "]"
  156 tuple: . "(" tuple.exps ")"
  161 literal-exp: . float-exp
  162            | . "angle"
  163            | . duration
  164            | . string
  165            | . "[" exps "]"
  166            | . "<" bitor-exps ">"
  167            | . dictionary
  168            | . tuple
  169 string: . "string"
  170       | . string "string"
  171 literal-exp: . "__HERE__"
  177 lvalue: . primary-exp "[" exps "]"
  178 literal-exp: . "this"
  179            | . "call"
  180 primary-exp: . literal-exp
  181            | . "(" exp ")"
  182            | . "(" error ")"
  183            | . primary-exp "**" primary-exp
  184 unary-exp: . primary-exp
  185          | . "--" lvalue
  186          | . "++" lvalue
  187          | . "+" unary-exp
  188          | . "-" unary-exp
  189          | . "!" unary-exp
  190          | . "compl" unary-exp
  191 bitor-exp: . unary-exp
  192          | . bitor-exp "+" bitor-exp
  193          | . bitor-exp "-" bitor-exp
  194          | . bitor-exp "*" bitor-exp
  195          | . bitor-exp "/" bitor-exp
  196          | . bitor-exp "%" bitor-exp
  197          | . bitor-exp "^" bitor-exp
  198          | . bitor-exp "<<" bitor-exp
  199          | . bitor-exp "bitand" bitor-exp
  200          | . bitor-exp "bitor" bitor-exp
  201          | . bitor-exp ">>" bitor-exp
  212 rel-exp: . bitor-exp rel-ops
  215 exp: . rel-exp
  216    | . exp "&&" exp
  217    | . exp "||" exp
  218    | . exp "in" exp
  219    | . exp "!" "in" exp
  223    | . "%unscope:" unsigned
  224 primary-exp: . "%exp:" unsigned
  225 lvalue: . "%lvalue:" unsigned
  226       | . "%id:" unsigned
  227       | . primary-exp "." "%id:" unsigned
  228 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 501
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


State 498

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   91 default.opt: "default" ":" stmts .  ["}"]

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 91 (default.opt)


State 499

  115 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt .

    $default  reduce using rule 115 (stmt)


State 500

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 502


State 501

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   98 case: "case" match ":" stmts .  ["case", "default", "}"]

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 98 (case)


State 502

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 49 (stmt)
