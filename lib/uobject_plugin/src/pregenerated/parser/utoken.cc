#line 2 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/build-sys-linux-x86_64/src/parser/utoken.cc.raw"

#line 4 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/build-sys-linux-x86_64/src/parser/utoken.cc.raw"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "parser/flex-lexer.hh"
#include <ast/nary.hh>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[788] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      202,  200,  193,  194,  194,   65,   19,   66,  108,  102,
      103,   67,   68,  111,   70,   99,   72,   16,   16,  100,
      110,   79,   97,   89,   96,  171,  171,  104,  105,   92,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  106,  109,  107,  101,  200,  195,  197,  197,  196,
      196,  189,  190,  190,  172,  200,  104,   66,  193,  194,
       85,   73,   94,  122,   93,   74,   69,   75,   71,   76,
       98,  192,  191,   77,    0,   16,   18,   18,   18,    5,

       18,    6,    7,   18,   10,   18,   81,   80,   82,   83,
        0,   90,   91,  168,  171,  171,   78,  171,  171,  171,
       64,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,   38,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,   44,  171,   46,  171,  171,  171,  171,
      171,  171,  171,  171,   95,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  162,   95,
       88,    0,  195,  197,  199,  198,  189,  190,  190,  190,
      190,  183,  182,  173,  183,  175,  176,  177,  178,  179,

      180,  181,  183,    0,    0,    0,    0,    0,    0,   86,
      191,  191,   17,   18,    0,   17,   16,   18,   18,   18,
       18,    8,   11,   18,   15,   84,   87,  168,  169,  169,
      168,  168,  169,  169,  171,  171,   94,  124,  171,   64,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,   61,  171,  171,  171,  171,
      171,  171,  139,  171,  171,  171,  171,  171,   48,   65,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  120,  171,  171,  171,  171,   56,  171,  171,
      171,  171,  171,  171,  171,   92,    0,   20,  173,  184,
        0,    0,    0,    4,    0,    0,    0,    0,  191,  191,
      191,   17,   18,   18,   17,   17,   18,   18,    5,   18,
        6,    7,   18,   10,   18,   18,   13,   18,    9,   12,
       15,   15,   18,    0,  169,    0,    0,  169,  169,  169,
      168,  168,  169,    0,  171,  171,  171,  125,  171,  171,
      126,  171,   29,   30,  171,  127,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,   39,   40,  171,
      171,  171,  171,  171,  171,   61,  171,  171,  171,  171,

      137,  171,  171,  171,  171,  140,   62,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      166,  171,  171,  171,  171,  171,  171,  171,  171,   54,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  161,  171,  171,  173,  185,    0,  174,    0,    4,
        0,   24,    0,    0,  191,  191,  191,    0,   17,   17,
       18,   17,   18,   18,   14,   18,  169,    0,  169,  169,
      169,  169,    0,  171,  171,  171,  171,  113,   28,  118,
       31,  171,  114,   33,  171,  171,  171,  171,  171,  171,
      171,   60,  171,  171,  171,  171,  135,  171,  171,  171,

      171,  171,  171,  171,   47,   62,  171,  171,  171,  171,
      171,  143,  171,  171,  171,  171,  171,  171,  171,  146,
      171,  171,  171,  171,  171,  171,  171,  119,  171,  171,
      171,  171,  155,  171,  157,  171,  171,  171,   58,  171,
      171,   63,  171,  186,    0,  186,    0,   22,    0,    0,
        0,  191,  191,  191,   17,   17,   18,   18,   18,  169,
        0,    0,  169,    0,  169,    0,    0,  163,    0,  171,
      123,   27,  112,  171,  171,  171,  171,  129,   36,   37,
      130,  171,   60,  171,  133,  134,  171,  171,  171,  136,
      171,   45,  138,  171,  171,  171,   85,  171,  171,  171,

      171,  171,  117,  171,  171,   51,  147,  148,  167,   52,
      150,   53,  171,  171,  171,  153,  171,  171,  171,  171,
      171,  171,  171,   63,   78,  187,  188,    0,   23,    0,
        0,  191,  191,    2,    2,   17,   18,   18,    0,  169,
      169,  169,  171,   32,  171,  171,   35,  171,  171,  171,
       41,  164,  171,  171,  171,  141,  171,   49,  171,   50,
      115,  171,  171,  171,  171,  171,   55,  152,  171,  171,
      158,  171,  171,  160,  171,    0,    0,    0,  191,    2,
      169,    0,  121,  171,   34,  171,  132,   21,   42,   43,
      165,  171,  171,  171,  144,  171,  171,  151,  154,  156,

      159,  171,   59,    0,   25,    0,  191,  171,  171,  142,
        0,  170,  170,  170,    0,  170,  170,  170,  170,  170,
      170,  170,  170,    0,  170,  171,  171,  170,  116,  171,
      171,   57,    0,   26,  191,    1,    1,  191,  191,  128,
      171,    0,    0,  170,  170,  170,  171,  171,  171,  171,
        0,    0,    0,  191,    1,  171,    0,    0,  171,  170,
      171,  149,    3,  191,  191,  131,    0,  170,  171,    0,
      171,    3,    3,  191,    1,    0,  171,  171,    3,    0,
      170,  171,  170,    0,  171,  145,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   29,   29,   31,   29,
       32,   33,   34,   32,   32,   32,   32,   35,   32,   32,
       32,   36,   32,   32,   32,   32,   32,   37,   32,   32,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   32,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    1,    1,    1,
        5,    1,    1,    6,    1,    1,    1,    7,    6,    8,
        8,    8,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    9,    9,    9,    9,    9,    9,    1,    4,    1,
        1,    9,    8,    8,    8,    8,    8,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[813] =
    {   0,
        0, 1865,   69,   71,   73,   75,    0,   73, 1863,   83,
     1871, 1874,   91, 1866, 1866, 1842, 1874, 1841,   77, 1874,
     1874,   75,   79, 1874,   80, 1874,   90,   99,  147, 1874,
     1874,   73,   99,   96, 1874, 1855,   84, 1874, 1874, 1839,
       89,  121,   91,  149,  124,  145,  161,   99,  173,  117,
      104,  166,  175,  176,   97,  192,  200,  102,  193,  215,
      118, 1874,  110, 1874, 1838, 1857,    0, 1858, 1858, 1841,
     1845,    0,  130,  134, 1874,  260,  241,  222,  122, 1874,
     1832, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
     1874, 1874, 1849, 1874,  265,    0,    0,  274,  280, 1809,

     1796,    0,  186, 1811,    0,  306, 1874, 1874, 1827, 1874,
     1826, 1874, 1874,  309, 1840,  128, 1874,  207,  246,  214,
      300,  184,  218,  129,  141,  286,  266,  301,  259,  322,
      272,  220,  243,  282,  244,  205,  277,  306,  307,  132,
      294,  329,  332, 1839,  337,  347,  261,  348,  351,  355,
      356,  357,  360,  363,  365,  361,  366,  367,  370,  362,
      368,  374,  371,  375,  378,  377,  379,  369,  380,  387,
      388,  381,  384,  376,  391,  394,  414,  386, 1874, 1874,
     1874, 1846,    0, 1874, 1874, 1874,    0,  445,  447,  450,
      452, 1874, 1874,  437, 1836, 1874, 1874, 1874, 1874, 1874,

     1874, 1874,    0,  442, 1807, 1781, 1799, 1781, 1788, 1874,
        0,  464,  450,    0,  453,  456,  504,  462, 1793, 1798,
     1785,    0,    0, 1793,  545, 1874, 1874,  469,  510,    0,
      465,  473, 1783, 1775,  498,  385,  477, 1825,  449, 1874,
      390,  456,  448,  496,  502,  497,  503,  509,  512,  518,
      516,  522,  526,  523,  534,  525,  527,  536,  538,  507,
      545,  549,  548,  551,  569,  587,  573,  575,  585,  588,
      589,  590,  595,  596,  597,  598,  604,  602, 1824,  606,
      603,  599,  605,  607,  213,  608,  610,  613,  612,  614,
      617,  615,  616,  621,  618,  620,  622,  624,  625,  626,

      627,  628, 1823,  640,  642,  629,  646, 1822,  643,  649,
      650,  651,  659,  655,  661,  667, 1829, 1874,  522, 1874,
      668,    0,  685,    0, 1774, 1807, 1786, 1768,  689, 1776,
      637,  697,  709,  712,  727,  735,    0,  730, 1779, 1766,
        0,  661, 1781,    0,  758,  739,    0, 1777,    0,    0,
        0,    0,  763,  715,  781,  798,  775,    0,  804,    0,
      742,  766, 1761,  827,  684,  729,  712, 1810,  670,  730,
     1809,  686, 1808, 1807,  754, 1806,  756,  759,  780,  779,
      662,  803,  789,  816,  819,  820,  689, 1805, 1804,  787,
      823,  825,  826,  827,  828, 1874,  832,  830,  831,  833,

     1803,  834,  841,  843,  844, 1802,  846,  847,  848,  852,
      855,  857,  849,  858,  860,  865,  853,  856,  861,  866,
     1801,  867,  870,  868,  876,  879,  884,  894,  895, 1800,
      871,  877,  898,  899,  902,  903,  900,  907,  908,  909,
      910,  920,  925,  926, 1874, 1874,  921, 1874,  943,    0,
      900, 1874, 1757, 1764, 1753, 1750, 1746,  925,  956,  963,
      969,  975,  979,  987,    0,    0,  992,  935,  998, 1006,
     1021, 1010, 1025,  927,  921,  955,  915, 1794, 1793, 1792,
     1791,  929, 1790,  960, 1004,  939, 1014, 1022, 1024, 1033,
     1039, 1044, 1040, 1045, 1046, 1047, 1789, 1051, 1052, 1058,

     1054, 1053, 1055, 1060, 1788, 1874, 1059, 1062, 1063, 1064,
     1065, 1787, 1067, 1070, 1066, 1072, 1071, 1073, 1075, 1786,
     1076, 1077, 1078, 1080, 1081, 1083, 1086, 1785, 1082, 1087,
     1092, 1096, 1784, 1097, 1783, 1098, 1084, 1099, 1782, 1107,
     1113, 1135, 1125, 1874, 1780, 1135, 1140, 1874, 1768, 1728,
     1733, 1741, 1161, 1737, 1149, 1164, 1152, 1188, 1177, 1192,
     1200, 1204, 1207, 1210, 1215, 1762, 1220, 1874, 1234, 1126,
     1774, 1773, 1772, 1132, 1136, 1139, 1129, 1771, 1770, 1769,
     1768, 1142, 1874, 1167, 1767, 1164, 1177, 1222, 1227, 1766,
     1189, 1765, 1764, 1205, 1236, 1239, 1763, 1240, 1242, 1248,

     1249, 1250, 1762, 1252, 1253, 1761, 1760, 1759, 1147, 1758,
     1757, 1756, 1254, 1255, 1256, 1755, 1259, 1258, 1257, 1264,
     1260, 1262, 1273, 1874, 1754, 1874, 1874, 1269, 1874, 1717,
     1706,  149, 1298, 1758, 1758, 1304, 1272, 1287, 1259, 1310,
     1316, 1319, 1277, 1749, 1275, 1286, 1748, 1317, 1266, 1323,
     1747, 1746, 1331, 1332, 1333, 1745, 1336, 1744, 1334, 1743,
     1742, 1337, 1338, 1339, 1343, 1342, 1741, 1740, 1344, 1346,
     1739, 1351, 1349, 1738, 1345, 1343, 1725, 1700, 1397, 1874,
     1348, 1352, 1735, 1355, 1734, 1356, 1733, 1732, 1731, 1730,
     1722, 1360, 1418, 1364, 1713, 1366, 1371, 1704, 1668, 1631,

     1630, 1394, 1619, 1418, 1874, 1598, 1446, 1392, 1398, 1604,
     1488, 1588, 1587, 1385, 1599, 1581,  960, 1874, 1395, 1578,
     1167, 1577, 1431, 1559, 1572, 1395, 1405, 1357, 1563, 1425,
     1402, 1562, 1455, 1874, 1476, 1568, 1568, 1516, 1449, 1559,
     1449, 1520, 1514, 1535, 1522, 1520, 1443, 1367, 1450, 1463,
     1505, 1510, 1477, 1537, 1874, 1474, 1488, 1401, 1452, 1490,
     1497, 1435, 1368, 1378, 1549, 1274, 1227, 1164, 1499,  964,
     1495,  942, 1522, 1561, 1509,  707, 1475, 1512,  687,  661,
     1531, 1473,  665,  500, 1514,  423, 1874, 1575, 1584, 1587,
     1592, 1601, 1610, 1619, 1628, 1630, 1635, 1644, 1653,  207,

     1655, 1657, 1659, 1668,  153, 1677, 1686, 1695, 1704, 1713,
     1722, 1731
    } ;

static yyconst flex_int16_t yy_def[813] =
    {   0,
      787,    1,  788,  788,  789,  789,    1,    1,    1,    1,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  790,  790,  787,
      787,  787,  787,  787,  787,  791,  791,  787,  787,  787,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  787,  787,  787,  787,  787,  792,  787,  787,  787,
      787,  793,  787,  787,  787,  794,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  795,  787,  787,   29,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  787,  787,  787,  787,
      787,  787,  787,  797,  791,  791,  787,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  787,  787,
      787,  798,  792,  787,  787,  787,  793,  787,  787,  787,
      787,  787,  787,  787,  799,  787,  787,  787,  787,  787,

      787,  787,  800,  787,  787,  787,  787,  787,  787,  787,
      795,  795,   29,  796,  787,  801,  801,  796,  796,  796,
      796,  796,  796,  796,  801,  787,  787,  797,  787,  802,
      803,  803,  802,  802,  791,  791,  791,  791,  791,  787,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  798,  787,  787,  787,
      804,  805,  787,  806,  787,  787,  787,  787,  795,  795,
      795,   29,  796,  796,   29,  217,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      225,  225,  796,  787,  787,  787,  787,  802,  802,  802,
      803,  803,  802,  787,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  787,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  787,  787,  807,  787,  787,  806,
      787,  787,  787,  787,  795,  795,  795,  787,  217,  217,
      796,   29,  796,  796,  796,  353,  787,  787,  787,  802,
      802,  802,  808,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  787,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  787,  809,  807,  787,  787,  787,  787,
      787,  795,  795,  795,   29,  217,  796,  796,  796,  787,
      787,  787,  787,  787,  802,  808,  808,  787,  808,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  787,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  787,  791,  787,  787,  787,  787,  787,
      787,  795,  795,  787,  795,   29,  796,  796,  787,  787,
      802,  802,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  787,  787,  787,  795,  787,
      787,  787,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  787,  787,  787,  795,  791,  791,  791,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  791,  791,  787,  791,  791,
      791,  791,  810,  787,  795,  787,  795,  795,  795,  791,
      791,  787,  787,  787,  787,  787,  791,  791,  791,  791,
      810,  810,  810,  811,  787,  791,  787,  787,  791,  791,
      791,  791,  812,  811,  811,  791,  787,  787,  791,  787,
      791,  812,  812,  811,  811,  787,  791,  791,  812,  787,
      791,  791,  787,  787,  791,  791,    0,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787
    } ;

static yyconst flex_int16_t yy_nxt[1946] =
    {   0,
       12,   13,   14,   15,   13,   16,   17,   12,   18,   19,
       17,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       36,   36,   36,   36,   36,   36,   36,   38,   12,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   36,
       49,   36,   50,   51,   52,   53,   54,   36,   55,   56,
       57,   58,   59,   60,   61,   36,   36,   62,   63,   64,
       65,   68,   69,   68,   69,   73,   74,   73,   74,   75,
       66,   75,   70,   75,   70,   75,   83,   71,   85,   71,
       66,   78,   79,   87,  114,   79,   89,  107,  108,  114,

       86,  114,   84,   92,   88,   90,   91,  114,   93,  114,
       77,   76,  114,   76,  114,   94,   95,  116,   96,   96,
       96,  112,  113,   79,  109,  110,   79,  114,  114,   98,
      118,  114,  188,  189,  114,  179,  190,  191,  114,  114,
       99,  123,  114,  159,  100,   98,  124,  101,  102,  125,
      679,  114,  103,  679,  143,  114,  170,  104,  105,  114,
      448,  171,  235,  106,   95,  149,   96,   96,   96,  111,
      130,  114,  148,  178,  131,  119,  114,   98,  180,  132,
      120,  121,  122,  114,  243,  114,  114,  244,   99,  133,
      266,  126,  100,   98,  114,  101,  102,  134,  127,  135,

      103,  128,  114,  114,  129,  104,  105,  136,  150,  137,
      114,  138,  151,  139,  322,  114,  140,  114,  156,  141,
      144,  152,  142,  114,  114,  114,  145,  146,  114,  153,
      114,  154,  147,  155,  157,  172,  221,  158,  160,  236,
      222,  161,  162,  173,  241,  223,  165,   82,  174,  166,
      167,  261,  163,  114,  114,  164,  114,  175,  168,  176,
      204,  204,  204,  205,  177,  169,  193,  238,  206,  114,
      193,  114,  207,  239,  208,  415,  114,  204,  242,  194,
      194,  257,  114,  209,  213,  213,  213,  114,  215,  195,
      215,  237,  114,  216,  216,  216,  114,  258,  193,  217,

      217,  217,  196,  197,  114,  260,  274,  198,  248,  240,
      114,  114,  251,  252,  199,  240,  114,  114,  200,  228,
      201,  218,  202,  240,  203,  225,  225,  225,  229,  229,
      229,  256,  114,  262,  225,  225,  225,  263,  245,  114,
      267,  259,  114,  249,  268,  246,  247,  114,  225,  225,
      225,  225,  225,  225,  231,  232,  250,  114,  114,  233,
      264,  114,  265,  232,  234,  114,  114,  114,  240,  253,
      114,  114,  114,  114,  254,  114,  114,  114,  114,  114,
      114,  114,  255,  269,  114,  114,  114,  114,  114,  114,
      114,  114,  270,  271,  114,  114,  114,  114,  114,  272,

      114,  114,  275,  276,  114,  284,  283,  273,  278,  282,
      287,  277,  281,  295,  291,  365,  285,  280,  288,  279,
      289,  286,  293,  292,  114,  298,  296,  300,  310,  297,
      290,  299,  302,  114,  303,  301,  304,  305,  307,  308,
      294,  311,  309,  313,  316,  368,  306,  188,  189,  190,
      191,  312,  188,  189,  190,  191,  319,  319,  114,  114,
      314,  323,  323,  323,  315,  329,  114,  787,  329,  332,
      332,  332,  335,  335,  335,  336,  336,  336,  323,  787,
      333,  217,  217,  217,  359,  359,  359,  114,  229,  229,
      229,  334,  359,  359,  359,  367,  333,  338,  369,  364,

      371,  339,  364,  218,  340,  341,  114,  114,  114,  342,
      361,  370,  114,  114,  343,  344,  330,  114,  366,  114,
      331,   95,  114,  217,  217,  217,  114,  354,  114,  355,
      355,  355,  114,  114,  345,  114,  114,  114,  372,  718,
      356,  445,  445,  374,  114,  346,  114,  375,  114,  339,
      345,  357,  340,  341,  373,  114,  356,  342,  114,  114,
      389,  114,  343,  344,  351,  351,  351,  376,  382,  383,
      386,  377,  379,  352,  352,  352,  384,  378,  387,  114,
      385,  380,  381,  114,  388,  114,  353,  352,  352,  352,
      352,  352,  352,  394,  393,  114,  396,  114,  114,  114,

      114,  391,  396,  390,  392,  114,  114,  114,  114,  114,
      396,  395,  114,  114,  114,  114,  114,  114,  114,  398,
      114,  399,  114,  114,  114,  114,  114,  114,  114,  400,
      114,  114,  114,  397,  114,  114,  114,  114,  114,  114,
      403,  404,  405,  401,  402,  406,  408,  410,  409,  411,
      114,  413,  114,  114,  407,  396,  114,  412,  414,  114,
      114,  114,  417,  418,  421,  114,  419,  424,  416,  114,
      423,  114,  114,  422,  432,  420,  426,  114,  425,  435,
      114,  429,  431,  427,  428,  430,  433,  447,  447,  447,
      329,  438,  456,  329,  114,  440,  114,  434,  457,  114,

      436,  441,  784,  437,  449,  449,  449,  783,  444,  442,
      439,  221,  485,  443,  787,  222,  332,  332,  332,  474,
      223,  449,  114,  458,  477,  458,  773,  333,  459,  459,
      459,  460,  460,  460,  467,  467,  467,  479,  334,  114,
      114,  330,  491,  333,  787,  331,  462,  462,  462,  336,
      336,  336,  787,  461,  336,  336,  336,   97,  217,  217,
      217,  359,  359,  359,  114,  337,  114,  780,  463,  114,
      476,  464,  215,   97,  215,  475,  338,  216,  216,  216,
      218,  337,  351,  351,  351,  359,  359,  359,  478,  114,
      114,  351,  351,  351,  355,  355,  355,  114,  354,  114,

      355,  355,  355,  480,  466,  351,  351,  351,  351,  351,
      351,  356,  468,  114,  468,  481,  357,  469,  469,  469,
      482,  354,  357,  470,  470,  470,  114,  356,  364,  114,
      114,  364,  483,  114,  471,  114,  114,  114,  114,  484,
      114,  114,  114,  114,  114,  472,  473,  473,  473,  487,
      471,  114,  492,  114,  114,  506,  114,  114,  114,  114,
      488,  506,  114,  114,  486,  114,  114,  114,  114,  506,
      114,  114,  490,  493,  498,  114,  114,  114,  114,  496,
      114,  114,  489,  494,  495,  500,  114,  114,  497,  114,
      507,  505,  502,  501,  114,  503,  499,  510,  509,  511,

      513,  504,  514,  516,  114,  114,  512,  508,  114,  114,
      114,  515,  114,  114,  506,  517,  521,  114,  114,  114,
      114,  518,  548,  522,  519,  114,  523,  520,  525,  524,
      114,  114,  529,  545,  528,  114,  114,  114,  526,  114,
      546,  546,  546,  530,  555,  555,  555,  527,  531,  114,
      534,  535,  532,  533,  469,  469,  469,  570,  539,  549,
      573,  536,  547,  547,  547,  114,  541,  537,  540,  538,
      114,  542,  543,  787,  718,  556,  556,  556,  571,  547,
      787,  773,  460,  460,  460,  718,  337,  574,  460,  460,
      460,  577,  787,  558,  462,  462,  462,  557,  336,  336,

      336,  575,  337,  718,  559,   97,  336,  336,  336,  558,
      461,  560,  560,  560,  114,  572,  463,  563,  563,  563,
      464,   97,  561,  354,  114,  470,  470,  470,  464,  470,
      470,  470,  114,  562,  114,  468,  471,  468,  561,  564,
      565,  565,  565,  114,  567,  567,  567,  472,  568,  114,
      114,  472,  471,  583,  114,  114,  114,  114,  576,  583,
      578,  114,  114,  114,  114,  114,  569,  583,  114,  114,
      114,  579,  114,  114,  114,  114,  114,  114,  580,  581,
      114,  114,  114,  114,  584,  114,  114,  114,  114,  582,
      114,  114,  114,  114,  114,  588,  114,  114,  589,  587,

      586,  593,  114,  590,  591,  585,  114,  114,  114,  114,
      602,  595,  583,  592,  594,  600,  603,  114,  596,  605,
      597,  607,  609,  114,  608,  599,  598,  610,  613,  606,
      601,  604,  612,  615,  620,  114,  114,  616,  617,  114,
      619,  611,  114,  614,  624,  114,  114,  545,  622,  114,
      624,  618,  114,  621,  546,  546,  546,  114,  624,  628,
      628,  628,  633,  634,  635,  633,  787,  643,  636,  636,
      636,  556,  556,  556,  114,  623,  628,  114,  644,   97,
      645,  787,  625,  556,  556,  556,  648,  114,  665,  647,
      637,  745,  718,  638,  337,   97,  460,  460,  460,  114,

      646,  770,  458,  624,  458,  557,  650,  459,  459,  459,
      337,  560,  560,  560,  639,  114,  639,  649,  461,  640,
      640,  640,  561,  560,  560,  560,  563,  563,  563,  563,
      563,  563,  114,  562,  641,  641,  641,  114,  561,  567,
      567,  567,  651,  568,  654,  562,  114,  655,  564,  114,
      114,  564,  114,  567,  567,  567,  642,  568,  114,  114,
      114,  569,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  652,  114,  776,  114,  569,  114,  653,  640,  640,
      640,  657,  656,  114,  114,  114,  658,  114,  676,  676,
      676,  556,  556,  556,  660,  661,  114,  659,  663,  633,

      634,  635,  633,  668,  670,  676,  556,  556,  556,  671,
      662,  664,  669,  638,  666,  667,  672,  684,  683,  675,
      673,  787,  674,  636,  636,  636,  687,  114,  638,  681,
      681,  681,  685,  114,   97,  641,  641,  641,  641,  641,
      641,  114,  114,  114,  114,  637,  114,  114,  114,  114,
       97,  682,  114,  114,  114,  114,  114,  642,  686,  114,
      642,  114,  704,  704,  704,  114,  114,  681,  681,  681,
      114,  681,  681,  681,  114,  688,  114,  114,  689,  704,
      692,  114,  718,  694,  765,  691,  690,  697,  698,  682,
      699,  700,  693,  682,  718,  696,  695,  701,  679,  702,

      709,  679,  114,  703,  114,  114,  710,  773,  114,  729,
      718,  718,  114,  731,  708,  114,  707,  707,  707,  711,
      718,  744,  711,  712,  730,  718,  713,  714,  114,  715,
      760,  716,  717,  718,  719,  114,  720,  733,  733,  733,
      741,  747,  721,  722,  723,  114,  732,  735,  736,  737,
      735,  748,  740,  114,  733,  724,  718,  746,  725,  114,
      114,  750,  114,  726,  768,  738,  738,  738,  738,  738,
      738,  749,  727,  114,  752,  752,  752,  735,  736,  737,
      735,  763,  754,  114,  114,  114,  728,  739,  718,  711,
      739,  752,  711,  712,  753,  759,  713,  714,  769,  715,

      114,  716,  717,  718,  719,  114,  720,  114,  756,  114,
      761,  755,  721,  722,  723,  765,  753,  735,  736,  737,
      735,  781,  114,  762,  114,  724,  779,  770,  725,  752,
      752,  752,  785,  742,  766,  738,  738,  738,  771,  778,
      767,  114,  743,  765,  753,  718,  752,  718,  718,  753,
      774,  736,  775,  774,  782,  765,  728,  739,  718,  777,
      758,  773,  774,  736,  775,  774,  757,  765,  784,  114,
      755,  755,  114,  114,  786,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   97,   97,   97,  115,  718,  718,  115,

      115,  183,  718,  718,  183,  183,  718,  183,  183,  183,
      187,  718,  718,  718,  114,  187,  187,  187,  187,  192,
      734,  192,  192,  192,  192,  192,  192,  192,  211,  114,
      211,  211,  211,  211,  211,  211,  211,  214,  214,  230,
      114,  114,  230,  230,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  337,  337,  358,  358,  360,  360,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  450,  114,  450,
      450,  450,  450,  450,  450,  450,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  751,  114,  751,  751,  751,  751,  751,
      751,  751,  764,  114,  764,  764,  764,  764,  764,  764,
      764,  772,  114,  772,  772,  772,  772,  772,  772,  772,
      114,  114,  114,  114,  114,  114,  706,  705,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      680,  680,  678,  677,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  568,  632,  632,  631,  630,
      629,  627,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  554,  553,  552,  551,  550,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  362,  465,  224,  220,  219,  455,  454,  453,  452,
      451,  318,  114,  114,  114,  114,  363,  362,  350,  349,
      348,  347,  328,  327,  326,  325,  324,  321,  318,  114,
      114,  227,  226,  224,  220,  219,  212,  210,  186,  185,
      184,  184,  182,  181,  117,  114,   82,   81,   80,   80,
      787,   78,   66,   11,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787
    } ;

static yyconst flex_int16_t yy_chk[1946] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    5,    5,    6,    6,    5,
        8,    6,    3,    5,    4,    6,   19,    3,   22,    4,
       10,   10,   13,   23,   37,   13,   25,   32,   32,   41,

       22,   43,   19,   27,   23,   25,   25,   55,   27,   48,
        8,    5,   58,    6,   51,   27,   28,   37,   28,   28,
       28,   34,   34,   79,   33,   33,   79,   50,   61,   28,
       41,   42,   73,   73,   45,   63,   74,   74,  116,  124,
       28,   43,  140,   55,   28,   28,   43,   28,   28,   43,
      632,  125,   28,  632,   48,   46,   58,   28,   28,   44,
      805,   58,  116,   28,   29,   51,   29,   29,   29,   33,
       45,   47,   50,   61,   45,   42,   52,   29,   63,   45,
       42,   42,   42,   49,  124,   53,   54,  125,   29,   45,
      140,   44,   29,   29,  122,   29,   29,   46,   44,   46,

       29,   44,   56,   59,   44,   29,   29,   46,   52,   46,
       57,   47,   52,   47,  800,  136,   47,  118,   54,   47,
       49,   52,   47,  285,  120,   60,   49,   49,  123,   53,
      132,   53,   49,   53,   54,   59,  103,   54,   56,  118,
      103,   56,   56,   59,  122,  103,   57,   78,   59,   57,
       57,  136,   56,  133,  135,   56,  119,   60,   57,   60,
       77,   77,   77,   77,   60,   57,   76,  120,   78,  129,
       76,  147,   78,  120,   78,  285,  127,   77,  123,   76,
       76,  132,  131,   78,   95,   95,   95,  137,   98,   76,
       98,  119,  134,   98,   98,   98,  126,  133,   76,   99,

       99,   99,   76,   76,  141,  135,  147,   76,  127,  121,
      121,  128,  129,  129,   76,  121,  138,  139,   76,  114,
       76,   99,   76,  121,   76,  106,  106,  106,  114,  114,
      114,  131,  130,  137,  106,  106,  106,  137,  126,  142,
      141,  134,  143,  128,  141,  126,  126,  145,  106,  106,
      106,  106,  106,  106,  114,  114,  128,  146,  148,  114,
      138,  149,  139,  114,  114,  150,  151,  152,  121,  130,
      153,  156,  160,  154,  130,  155,  157,  158,  161,  168,
      159,  163,  130,  142,  162,  164,  174,  166,  165,  167,
      169,  172,  143,  145,  173,  236,  178,  170,  171,  146,

      241,  175,  148,  148,  176,  156,  155,  146,  150,  154,
      158,  149,  153,  163,  160,  236,  157,  152,  159,  151,
      159,  157,  162,  161,  177,  164,  163,  166,  174,  163,
      159,  165,  167,  786,  168,  166,  169,  170,  171,  172,
      162,  175,  173,  176,  178,  241,  170,  188,  188,  189,
      189,  175,  190,  190,  191,  191,  194,  194,  243,  239,
      177,  204,  204,  204,  177,  212,  242,  213,  212,  213,
      213,  213,  215,  215,  215,  216,  216,  216,  204,  228,
      213,  218,  218,  218,  231,  231,  231,  237,  228,  228,
      228,  213,  232,  232,  232,  239,  213,  216,  242,  235,

      243,  216,  235,  218,  216,  216,  244,  246,  235,  216,
      231,  242,  245,  247,  216,  216,  212,  260,  237,  248,
      212,  217,  249,  217,  217,  217,  251,  229,  250,  229,
      229,  229,  252,  254,  217,  256,  253,  257,  244,  784,
      229,  319,  319,  246,  255,  217,  258,  247,  259,  217,
      217,  229,  217,  217,  245,  261,  229,  217,  263,  262,
      260,  264,  217,  217,  225,  225,  225,  248,  253,  254,
      257,  249,  251,  225,  225,  225,  255,  250,  258,  265,
      256,  252,  252,  267,  259,  268,  225,  225,  225,  225,
      225,  225,  225,  264,  263,  269,  266,  266,  270,  271,

      272,  262,  266,  261,  262,  273,  274,  275,  276,  282,
      266,  265,  278,  281,  277,  283,  280,  284,  286,  267,
      287,  268,  289,  288,  290,  292,  293,  291,  295,  269,
      296,  294,  297,  266,  298,  299,  300,  301,  302,  306,
      272,  273,  274,  270,  271,  275,  277,  280,  278,  281,
      304,  283,  305,  309,  276,  266,  307,  282,  284,  310,
      311,  312,  287,  288,  291,  314,  289,  294,  286,  313,
      293,  315,  381,  292,  302,  290,  296,  316,  295,  306,
      369,  299,  301,  297,  298,  300,  304,  321,  321,  321,
      329,  310,  331,  329,  365,  312,  372,  305,  331,  387,

      307,  313,  783,  309,  323,  323,  323,  780,  316,  314,
      311,  342,  381,  315,  332,  342,  332,  332,  332,  365,
      342,  323,  367,  333,  369,  333,  779,  332,  333,  333,
      333,  334,  334,  334,  354,  354,  354,  372,  332,  366,
      370,  329,  387,  332,  335,  329,  335,  335,  335,  338,
      338,  338,  336,  334,  336,  336,  336,  335,  346,  346,
      346,  361,  361,  361,  375,  336,  377,  776,  335,  378,
      367,  338,  345,  335,  345,  366,  336,  345,  345,  345,
      346,  336,  353,  353,  353,  362,  362,  362,  370,  380,
      379,  353,  353,  353,  357,  357,  357,  390,  355,  383,

      355,  355,  355,  375,  353,  353,  353,  353,  353,  353,
      353,  355,  356,  382,  356,  377,  357,  356,  356,  356,
      378,  359,  355,  359,  359,  359,  384,  355,  364,  385,
      386,  364,  379,  391,  359,  392,  393,  394,  395,  380,
      398,  399,  397,  400,  402,  359,  364,  364,  364,  383,
      359,  403,  390,  404,  405,  407,  407,  408,  409,  413,
      384,  407,  410,  417,  382,  411,  418,  412,  414,  407,
      415,  419,  386,  391,  397,  416,  420,  422,  424,  394,
      423,  431,  385,  392,  393,  399,  425,  432,  395,  426,
      408,  405,  402,  400,  427,  403,  398,  411,  410,  412,

      414,  404,  415,  417,  428,  429,  413,  409,  433,  434,
      437,  416,  435,  436,  407,  418,  423,  438,  439,  440,
      441,  419,  451,  424,  420,  477,  425,  422,  427,  426,
      442,  475,  432,  447,  431,  443,  444,  474,  428,  482,
      447,  447,  447,  433,  458,  458,  458,  429,  433,  486,
      435,  436,  433,  434,  468,  468,  468,  474,  440,  451,
      477,  437,  449,  449,  449,  476,  442,  438,  441,  439,
      484,  443,  444,  459,  717,  459,  459,  459,  475,  449,
      460,  772,  460,  460,  460,  717,  459,  482,  461,  461,
      461,  486,  462,  460,  462,  462,  462,  459,  463,  463,

      463,  484,  459,  770,  460,  462,  464,  464,  464,  460,
      461,  467,  467,  467,  485,  476,  462,  469,  469,  469,
      463,  462,  467,  470,  487,  470,  470,  470,  464,  472,
      472,  472,  488,  467,  489,  471,  470,  471,  467,  469,
      471,  471,  471,  490,  473,  473,  473,  470,  473,  491,
      493,  472,  470,  492,  492,  494,  495,  496,  485,  492,
      487,  498,  499,  502,  501,  503,  473,  492,  500,  507,
      504,  488,  508,  509,  510,  511,  515,  513,  489,  490,
      514,  517,  516,  518,  493,  519,  521,  522,  523,  491,
      524,  525,  529,  526,  537,  498,  527,  530,  499,  496,

      495,  503,  531,  500,  501,  494,  532,  534,  536,  538,
      515,  507,  492,  502,  504,  513,  516,  540,  508,  518,
      509,  521,  523,  541,  522,  511,  510,  524,  527,  519,
      514,  517,  526,  530,  537,  543,  570,  531,  532,  577,
      536,  525,  574,  529,  542,  542,  575,  546,  540,  576,
      542,  534,  582,  538,  546,  546,  546,  609,  542,  547,
      547,  547,  553,  553,  553,  553,  555,  570,  555,  555,
      555,  557,  557,  557,  586,  541,  547,  584,  574,  555,
      575,  556,  543,  556,  556,  556,  582,  587,  609,  577,
      555,  721,  721,  557,  556,  555,  559,  559,  559,  591,

      576,  768,  558,  542,  558,  556,  586,  558,  558,  558,
      556,  560,  560,  560,  561,  594,  561,  584,  559,  561,
      561,  561,  560,  562,  562,  562,  563,  563,  563,  564,
      564,  564,  588,  560,  565,  565,  565,  589,  560,  567,
      567,  567,  587,  567,  591,  562,  595,  594,  563,  596,
      598,  564,  599,  569,  569,  569,  565,  569,  600,  601,
      602,  567,  604,  605,  613,  614,  615,  619,  618,  617,
      621,  588,  622,  767,  620,  569,  649,  589,  639,  639,
      639,  596,  595,  623,  766,  645,  598,  643,  628,  628,
      628,  637,  637,  637,  600,  601,  646,  599,  604,  633,

      633,  633,  633,  615,  618,  628,  638,  638,  638,  619,
      602,  605,  617,  637,  613,  614,  620,  645,  643,  623,
      621,  636,  622,  636,  636,  636,  649,  648,  638,  640,
      640,  640,  646,  650,  636,  641,  641,  641,  642,  642,
      642,  653,  654,  655,  659,  636,  657,  662,  663,  664,
      636,  640,  666,  665,  669,  675,  670,  641,  648,  673,
      642,  672,  676,  676,  676,  684,  686,  681,  681,  681,
      692,  682,  682,  682,  694,  650,  696,  748,  653,  676,
      657,  697,  728,  662,  764,  655,  654,  665,  666,  681,
      669,  670,  659,  682,  714,  664,  663,  672,  679,  673,

      686,  679,  708,  675,  702,  726,  692,  763,  709,  694,
      714,  719,  731,  697,  684,  727,  679,  679,  679,  693,
      719,  719,  693,  693,  696,  728,  693,  693,  693,  693,
      748,  693,  693,  693,  693,  730,  693,  704,  704,  704,
      709,  726,  693,  693,  693,  762,  702,  707,  707,  707,
      707,  727,  708,  747,  704,  693,  723,  723,  693,  741,
      749,  731,  759,  693,  758,  707,  707,  707,  739,  739,
      739,  730,  693,  750,  733,  733,  733,  735,  735,  735,
      735,  753,  735,  782,  756,  777,  693,  707,  693,  711,
      739,  733,  711,  711,  733,  747,  711,  711,  759,  711,

      760,  711,  711,  711,  711,  771,  711,  761,  741,  769,
      749,  775,  711,  711,  711,  775,  753,  738,  738,  738,
      738,  777,  778,  750,  785,  711,  773,  760,  711,  752,
      752,  752,  782,  711,  756,  738,  738,  738,  761,  771,
      757,  781,  711,  754,  751,  746,  752,  745,  744,  752,
      765,  765,  765,  765,  778,  765,  711,  738,  711,  769,
      743,  773,  774,  774,  774,  774,  742,  774,  781,  740,
      737,  736,  732,  729,  785,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  790,  790,  790,  791,  725,  724,  791,

      791,  792,  722,  720,  792,  792,  716,  792,  792,  792,
      793,  715,  713,  712,  710,  793,  793,  793,  793,  794,
      706,  794,  794,  794,  794,  794,  794,  794,  795,  703,
      795,  795,  795,  795,  795,  795,  795,  796,  796,  797,
      701,  700,  797,  797,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  801,  801,  802,  802,  803,  803,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  806,  699,  806,
      806,  806,  806,  806,  806,  806,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  810,  698,  810,  810,  810,  810,  810,
      810,  810,  811,  695,  811,  811,  811,  811,  811,  811,
      811,  812,  691,  812,  812,  812,  812,  812,  812,  812,
      690,  689,  688,  687,  685,  683,  678,  677,  674,  671,
      668,  667,  661,  660,  658,  656,  652,  651,  647,  644,
      635,  634,  631,  630,  625,  616,  612,  611,  610,  608,
      607,  606,  603,  597,  593,  592,  590,  585,  581,  580,
      579,  578,  573,  572,  571,  566,  554,  552,  551,  550,
      549,  545,  539,  535,  533,  528,  520,  512,  505,  497,

      483,  481,  480,  479,  478,  457,  456,  455,  454,  453,
      430,  421,  406,  401,  389,  388,  376,  374,  373,  371,
      368,  363,  348,  343,  340,  339,  330,  328,  327,  326,
      325,  317,  308,  303,  279,  238,  234,  233,  224,  221,
      220,  219,  209,  208,  207,  206,  205,  195,  182,  144,
      115,  111,  109,  104,  101,  100,   93,   81,   71,   70,
       69,   68,   66,   65,   40,   36,   18,   16,   15,   14,
       11,    9,    2,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
/*
 * Copyright (C) 2005-2012, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */
#line 11 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
  /// \file parser/utoken.l
  /// \brief The scanner.

#include <libport/debug.hh>

#include <libport/cstdio>
#include <libport/cstdlib>
#include <libport/cstring>
#include <sstream>

#include <boost/algorithm/string/erase.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/numeric/conversion/cast.hpp>

#include <libport/escape.hh>
#include <libport/format.hh>
#include <libport/ufloat.hh>

#include <parser/parser-impl.hh>
#include <parser/utoken.hh>
#include <parser/ugrammar.hh>

GD_CATEGORY(Urbi.Scanner);

// Shorter access to the tokens.
typedef yy::parser::token token;

// We need this type everywhere.
using libport::ufloat;

/// Split yytext which matches
/// "BIN"{BLANKS}{NATURAL}{BLANKS}[^;]*";"
/// setting \a keywords to the first char of keyword, and return the
/// size.
static size_t bin_split(char* yytext, size_t yyleng, char*& keywords);

// Convert an hexadecimal number without the leading 0x.
static long long hexadecimal(std::string t);

// Safe conversion to a numeric value.
template <typename Out>
static Out lexical_cast(parser::ParserImpl* up, const yy::location& loc,
                        std::string t);

// Skip the spaces in yytext.
# define SKIP_SPACES()                          \
  while (isspace(*yytext))                      \
    ++yytext

# define YY_INPUT(Buf, Result, MaxSize)                 \
  do                                                    \
  {                                                     \
    if (yyin->eof() || yyin->fail())                    \
    {                                                   \
      Result = 0;                                       \
      break;                                            \
    }                                                   \
                                                        \
    GD_FPUSH_TRACE("Input (max size = %s)", MaxSize);   \
    yyin->readsome(Buf, MaxSize);                       \
                                                        \
    if (!yyin->gcount() && !yyin->eof())                \
    {                                                   \
      yyin->peek();                                     \
      yyin->readsome(Buf, MaxSize);                     \
    }                                                   \
                                                        \
    if (yyin->bad())                                    \
    {                                                   \
      GD_INFO_DEBUG("BAD");                             \
      Result = -1;                                      \
      break;                                            \
    }                                                   \
                                                        \
    GD_FINFO_DEBUG("%s bytes", yyin->gcount());         \
    Result = yyin->gcount();                            \
  } while (0)

# define YY_USER_INIT                                           \
  static bool flex_debug = getenv("URBI_SCANNER");              \
  yy_flex_debug = flex_debug || GD_ENABLED(dump);               \
                                                                \
  static bool urbi_check_mode = getenv("URBI_CHECK_MODE");      \
                                                                \
  /* The default start condition.  */                           \
  sc_default =                                                  \
    parser_impl_->meta() ? SC_META                              \
    : urbi_check_mode ? SC_URBI_CHECK                           \
    : INITIAL;                                                  \
  BEGIN sc_default;                                             \
                                                                \
  static bool init = false;                                     \
  if (!init)                                                    \
  {                                                             \
    init = true;                                                \
    if (urbi_check_mode)                                        \
      GD_INFO("URBI_CHECK_MODE enabled.");                      \
  }

// Report an error and make a parse error.
// E.g.: bad tokens (such as "2x").
#define SCAN_FATAL(...)                                                 \
  throw yy::parser::syntax_error(loc, libport::format(__VA_ARGS__))

// Report an error in a token, but we can continue scanning.
// E.g.: bad escapes in strings.
#define SCAN_ERROR(...)                                         \
  parser_impl_->error(loc, libport::format(__VA_ARGS__))

// Stupidly enough the Flex documentation recommends redefining
// LexerError, which does not seem to be possible (since it is flex
// which generates unconditionally its definition in utoken.cc).
#define YY_FATAL_ERROR(Msg)                     \
  SCAN_FATAL(Msg)

// Each time a rule is matched.
#define YY_USER_ACTION                          \
  COLUMNS(static_cast<unsigned>(yyleng));

// Move the front cursor to the end cursor.
#define STEP()                                  \
    loc.step()

// Called via YY_USER_ACION each time we *advance* the cursor, in
// which case Num is actually the number of bytes read.
#define COLUMNS(Num)                                        \
  loc.columns(Num)

// To avoid differences between versions of Bison, set by hand the
// initial columns when advancing lines.  Does not touch pre_length,
// since LINES is always called after COLUMNS was, which did update
// pre_length.
#define LINES(Num)                                  \
  do {                                              \
    loc.lines(Num);                                 \
    loc.end.column = 1;                             \
  } while (false)

// Report an EOF error.
#define EOF_ERROR(Where)                                \
  SCAN_ERROR("unexpected end of file in %s", Where)

// Report the use of a reserved word.
#define RESERVED_ERROR                          \
  SCAN_FATAL("reserved symbol: `%s'", yytext)

// Otherwise Flex returns an int instead of an enum.
#define yyterminate()                                   \
  return yy::parser::make_EOF(loc)


// Extend the string value of valp.
#define GROW_VAL(Value)                         \
  grown_string += Value

// Extend the string value of valp.
#define APPEND_VAL(Arg1, Arg2)                  \
  grown_string.append(Arg1, Arg2)


/*----------------------------------.
| Sugar to return semantic values.  |
`----------------------------------*/

#define RETURN(Symbol)                          \
  return yy::parser::make_ ## Symbol(loc)

#define RETURN_VALUE(Symbol, Value)              \
  return yy::parser::make_ ## Symbol(Value, loc)

// UnitLength is the number of letters used for the unit.
#define RETURN_UNIT(Token, UnitLength, From, To)                        \
  do {                                                                  \
    yytext[yyleng - UnitLength] = 0;                                    \
    RETURN_VALUE(Token,                                                 \
                 lexical_cast<ufloat>(parser_impl_, loc, yytext)        \
                 / (From) * (To));                                      \
  } while (false)


#define RETURN_ANGLE(UnitLength, From, To)      \
  RETURN_UNIT(ANGLE, UnitLength, From, To)

#define RETURN_DURATION(UnitLength, Scale)      \
  RETURN_UNIT(DURATION, UnitLength, 1, Scale)


// For ",", ";", "|", and "&" (i.e., COMMA, SEMICOLON, PIPE, and AND).
#define RETURN_FLAVOR(Symbol, Flavor)           \
  RETURN_VALUE(Symbol, ast::flavor_ ## Flavor)

#define RETURN_FLAVORED_KEYWORD(Token)                  \
  switch (yytext[yyleng - 1])                           \
  {                                                     \
  case '|': RETURN_FLAVOR(Token, pipe);                 \
  case ',': RETURN_FLAVOR(Token, comma);                \
  case '&': RETURN_FLAVOR(Token, and);                  \
  case ';': RETURN_FLAVOR(Token, semicolon);            \
  default:  RETURN_FLAVOR(Token, none);                 \
  }

// Return an operator whose string representation is kept as a Symbol.
// Contrary to RETURN_SYMBOL, the symbol is resolved statically by
// precompiled-symbols.
#define RETURN_OP(Symbol)                       \
  RETURN_VALUE(Symbol, SYMBOL_(Symbol))

// Return a meta-variable type.  Only if desugaring is enabled.
#define RETURN_PERCENT(Token)                   \
  do {                                          \
    aver(parser_impl_->meta());                 \
    RETURN(PERCENT_ ## Token ## _COLON);        \
  } while (false)

// Return a std::string of kind Token with yytext as value.
#define RETURN_STR(Token)                       \
  RETURN_VALUE(Token, yytext)

// Return a Symbol of kind Token with yytext as Value.
#define RETURN_SYMBOL(Token)                    \
  RETURN_VALUE(Token, libport::Symbol(yytext))


/// Unput a large string.
//
// As this will be rescanned, length will be added.  It must
// not, otherwise we introduce an offset in the locations, so subtract
// it first.
#define UNPUT(Str)                                      \
  do {                                                  \
    std::string _rewritten = Str;                       \
    for (int i = _rewritten.length() - 1; 0 <= i; --i)  \
      unput(_rewritten[i]);                             \
    COLUMNS(-_rewritten.length());                      \
  } while (false)

// We matched an obsolete token, New is now preferered.  Unput it so
// that the regular scanning rule of New is run.  The braces are
// needed to scope msg and rewritten.
#define DEPRECATED(New)                                   \
  do {                                                    \
    std::string rewritten = New;                          \
    parser_impl_->deprecated(loc, yytext, rewritten);     \
    UNPUT(rewritten);                                     \
  } while (false)

/* No default rule. */
/* Allow faster implements. */
/* We need an interactive scanner.  Otherwise the generate scanner
   will always fetch one character of look-ahead, even when not
   needed.  This results in examples such as `lobby.received("1;");'
   not working, because we are waiting for the character after the
   (inner) `;' to process that `;'.  */
/* Even in -Cf mode, support 8 bit characters. */

// Ignore lines starting with "[000000:tag]", we are fed with a chk file.

// Enable meta variable support.

// Identifier.
// Identifier suffix for magic derivation (K1 syntax).
/* See [over.oper] in the C++ standard. */
#line 1382 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/build-sys-linux-x86_64/src/parser/utoken.cc.raw"

#define INITIAL 0
#define SC_C_COMMENT 1
#define SC_STRING_OR_SYMBOL 2
#define SC_URBI_CHECK 3
#define SC_META 4

#ifndef YY_NO_UNISTD_H
/* Special case for "libport/unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <libport/unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 302 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"


  // The first delimiter of a string or a symbol : ' or ".
  // Used in SC_STRING_OR_SYMBOL to know if it is reading a string or a symbol.
  char delimiter = 0;

  // A stack of expected closing braces: ), ], } etc.
  std::vector<char> pre_closers;

  // Nesting C comments.
  unsigned int comment_level = 0;

  // Calling yylex for a new token, reset the cursor.
  STEP();


  /*-----------------------------------.
  | Internal rules for generated code. |
  `-----------------------------------*/

#line 1515 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/build-sys-linux-x86_64/src/parser/utoken.cc.raw"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 788 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1874 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 322 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{

  /* synclines are mainly made to get correct locations when loading a
     file: save the current location before loading the file, then
     restore it afterwards.

     This is simple to implement using cpp like synclines: "//#line",
     "//#push", and "//#pop".  The semantics of the first one is
     simple: it contains the location of the *next* line.  The
     semantics of //#push and //#pop is that the outer location is the
     same as if everything was removed from the push to the pop (both
     included).

     But we have to display errors about //#pop.  What's its location?
     It is chosen to the location of current location.  That's how the
     LINES and STEP etc. were placed as they are in the
     synclines-rules below.  */

  yytext += strlen("//#");
  SKIP_SPACES();

  // line|push.
  if (yytext[0] == 'p')
  {
    // When pushing, store the location that *precedes* this request,
    // that of the starting cursor.
    loc.end = loc.begin;
    parser_impl_->synclines_.push(loc);
  }
  yytext += 4;

  SKIP_SPACES();
  char* line = yytext;
  yytext += strspn(yytext, "0123456789");
  *yytext = 0;
  ++yytext;

  char* file = strchr(yytext, '"');
  if (file)
  {
    ++file;
    // FIXME: We do not support " in file names, nor quotes.
    *strchr(file, '"') = 0;
  }

  loc.initialize(!file || libport::streq(file, "-")
		 ? 0
		 : new libport::Symbol(file));
  loc.lines(lexical_cast<unsigned>(parser_impl_, loc, line) - 1);
  loc.step();
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 374 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
  if (parser_impl_->synclines_.empty())
  {
    SCAN_ERROR("too many //#pop");
    LINES(1);
    STEP();
  }
  else
  {
    loc = parser_impl_->synclines_.top();
    parser_impl_->synclines_.pop();
  }
}
	YY_BREAK
/*-----------------------------------------------------------------.
  | Urbi check mode: skip the [01234567] lines for expected output.  |
  `-----------------------------------------------------------------*/

case 3:
YY_RULE_SETUP
#line 393 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
/* ignore the "[timestamp:tags] whatever" messages */;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 394 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
/* ignore the "[:] whatever" messages */;
	YY_BREAK

/*------------.
  | The rules.  |
  `------------*/
/* Durations. */
case 5:
YY_RULE_SETUP
#line 403 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 60*60*24);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 404 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 60*60);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 405 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
DEPRECATED(std::string(yytext) + "in");
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 406 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(2, 60);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 407 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(3, 60);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 408 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 1);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 409 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_DURATION(2, 0.001);
	YY_BREAK
/* Angles. */
case 12:
YY_RULE_SETUP
#line 412 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_ANGLE(3,   1,    1);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 413 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_ANGLE(3, 180, M_PI);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 414 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_ANGLE(4, 200, M_PI);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 416 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_VALUE(FLOAT, hexadecimal(yytext + 2));
	YY_BREAK
case 16:
#line 418 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 17:
YY_RULE_SETUP
#line 418 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_VALUE(FLOAT, lexical_cast<ufloat>(parser_impl_, loc, yytext));
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 420 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
SCAN_FATAL("invalid token: `%s'", yytext);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 422 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
                grown_string.clear();
                delimiter = *yytext;
                BEGIN SC_STRING_OR_SYMBOL;
              }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 428 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
LINES(1);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 430 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(EXTERNAL);
	YY_BREAK

case 22:
YY_RULE_SETUP
#line 433 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_PERCENT(EXP);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 434 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_PERCENT(EXPS);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 435 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_PERCENT(ID);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 436 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_PERCENT(LVALUE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 437 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_PERCENT(UNSCOPE);
	YY_BREAK

case 27:
YY_RULE_SETUP
#line 440 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(ASSERT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 441 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(BREAK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 442 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CALL);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 443 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CASE);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 444 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CLASS);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 445 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CLOSURE);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 446 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CONST);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 447 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CONTINUE);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 448 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(DEFAULT);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 449 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(DETACH);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 450 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(DISOWN);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 451 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(DO);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 452 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(ELSE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 453 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(ENUM);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 454 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(FINALLY);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 455 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(FREEZEIF);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 456 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(FUNCTION);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 457 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(IF);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 458 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(IMPORT);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 459 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(IN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 460 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(ISDEF);
	YY_BREAK
/*<no-space< New.*/
case 48:
YY_RULE_SETUP
#line 462 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_SYMBOL(NEW);
	YY_BREAK
/*>no-space>*/
case 49:
YY_RULE_SETUP
#line 464 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(ONLEAVE);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 465 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(PACKAGE);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 466 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(RETURN);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 467 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(STOPIF);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 468 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(SWITCH);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 469 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(THIS);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 470 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(TIMEOUT);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 471 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(VAR);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 472 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(WAITUNTIL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 473 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(WATCH);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 474 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(WHENEVER);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 476 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(EVERY);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 477 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(FOR);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 478 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(LOOP);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 479 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(WHILE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 480 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(AT);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 482 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(BANG);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 483 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(PERCENT);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 484 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(STAR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 485 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(PLUS);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 486 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(PLUS_PLUS);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 487 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(MINUS);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 488 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(MINUS_MINUS);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 489 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(SLASH);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 491 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(PERCENT_EQ);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 492 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(STAR_EQ);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 493 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(PLUS_EQ);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 494 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(MINUS_EQ);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 495 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(SLASH_EQ);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 496 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(CARET_EQ);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 498 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(LT);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 499 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(LT_EQ);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 500 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(LT_LT);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 501 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(EQ_EQ);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 502 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(EQ_GT);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 503 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(EQ_EQ_EQ);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 504 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(BANG_EQ);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 505 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(BANG_EQ_EQ);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 506 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(EQ_TILDA_EQ);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 507 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(TILDA_EQ);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 508 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(GT);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 509 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(GT_EQ);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 510 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(GT_GT);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 511 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(CARET);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 512 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(STAR_STAR);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 513 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(AMPERSAND_AMPERSAND);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 514 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_OP(PIPE_PIPE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 516 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(QUEST_MARK);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 518 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(EQ);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 520 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(MINUS_GT);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 521 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(POINT);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 522 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(COLON);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 523 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(TILDA);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 525 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(LPAREN);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 526 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(RPAREN);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 527 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(LBRACKET);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 528 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(RBRACKET);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 529 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(LBRACE);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 530 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(RBRACE);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 532 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVOR(AMPERSAND, and);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 533 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVOR(PIPE, pipe);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 534 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVOR(SEMICOLON, semicolon);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 535 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_FLAVOR(COMMA, comma);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 537 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_SYMBOL(BITAND);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 538 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_SYMBOL(BITOR);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 539 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_SYMBOL(COMPL);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 541 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(PRIVATE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 542 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(PROTECTED);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 543 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(PUBLIC);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 545 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(CATCH);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 546 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(THROW);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 547 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(TRY);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 549 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN(__HERE__);
	YY_BREAK
/*<no-space< Reserved keywords.*/
case 122:
#line 553 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 123:
#line 554 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 124:
#line 555 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 125:
#line 556 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 126:
#line 557 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 127:
#line 558 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 128:
#line 559 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 129:
#line 560 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 130:
#line 561 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 131:
#line 562 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 132:
#line 563 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 133:
#line 564 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 134:
#line 565 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 135:
#line 566 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 136:
#line 567 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 137:
#line 568 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 138:
#line 569 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 139:
#line 570 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 140:
#line 571 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 141:
#line 572 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 142:
#line 573 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 143:
#line 574 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 144:
#line 575 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 145:
#line 576 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 146:
#line 577 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 147:
#line 578 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 148:
#line 579 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 149:
#line 580 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 150:
#line 581 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 151:
#line 582 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 152:
#line 583 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 153:
#line 584 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 154:
#line 585 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 155:
#line 586 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 156:
#line 587 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 157:
#line 588 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 158:
#line 589 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 159:
#line 590 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 160:
#line 591 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 161:
#line 592 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 162:
YY_RULE_SETUP
#line 592 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RESERVED_ERROR;
	YY_BREAK
/*>no-space>*/
/*----------------------.
  | The infamous k1-BIN.  |
  `----------------------*/
/* It is used only as a sort of here-doc,
     and it is just as unusable, yet necessary.

     The only supported syntax was "var foo = BIN SIZE (keywords)+; DATA"
     with DATA being SIZE long.  Note where the ";" is...
   */
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 605 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
  char* keywords;
  size_t size = bin_split (yytext, yyleng, keywords);
  // Eat the data.
  std::string data;
  for (size_t i = 0; i < size; ++i)
    switch (int c = yyinput())
    {
      case EOF:
        EOF_ERROR("BIN");
        goto out_of_loop;
      default:
        // Keep track of the locations.
        COLUMNS(1);
        data += c;
        break;
    }
  out_of_loop:
  UNPUT(libport::format("Binary.new(\"%s\", \"%s\");",
                        keywords, libport::escape(data, '"')));
}
	YY_BREAK
/*<no-space< Deprecated constructs. */
/*------------------------.
  | Deprecated constructs.  |
  `------------------------*/
case 164:
YY_RULE_SETUP
#line 633 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
DEPRECATED("for");
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 634 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
DEPRECATED("");
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 635 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
DEPRECATED("this");
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 636 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
DEPRECATED("");
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 638 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{ // Treat "n'x" as "n->x".
  // Push back "n.'\''" in the stream.
  char* quote = strchr(yytext, '\'');
  std::string s (yytext, quote - yytext);
  s += "->";
  if (!quote[1])
    s += "prime";
  else if (quote[1] == '\'')
    s += "second";
  else
    s += quote + 1;
  DEPRECATED(s);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 651 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
  SCAN_FATAL("invalid quote: `%s'", strchr(yytext, '\''));
}
	YY_BREAK
/*>no-space>*/
/* operator XXX -> 'XXX'. */
case 170:
YY_RULE_SETUP
#line 657 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
                yytext += strlen("operator");
                SKIP_SPACES();
                RETURN_SYMBOL(IDENTIFIER);
              }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 663 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
RETURN_SYMBOL(IDENTIFIER);
	YY_BREAK
/*--------------------.
    | Strings and symbols |
    `--------------------*/
/* Handling of the strings and symbols. */
case 172:
YY_RULE_SETUP
#line 671 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
       if (*yytext == delimiter)
       {
         BEGIN sc_default;
         if (*yytext == '\'')
           RETURN_VALUE(IDENTIFIER, libport::Symbol(grown_string));
         else
           RETURN_VALUE(STRING, grown_string);
       }
       else
         GROW_VAL(*yytext);
     }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 684 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
       long c = strtol (yytext + 1, 0, 8);
       if (c < 256)
         GROW_VAL(c);
       else
         SCAN_ERROR("invalid number after \\-escape: `%s'", yytext + 1);
     }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 692 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL(strtol (yytext + 2, 0, 16));
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 694 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\a');
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 695 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\b');
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 696 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\f');
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 697 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\n');
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 698 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\r');
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 699 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\t');
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 700 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL('\v');
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 701 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
GROW_VAL(yytext[1]);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 702 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
                  SCAN_ERROR("invalid character after \\-escape: `%s'",
                             libport::escape(yytext + 1));
     }
	YY_BREAK
case 184:
/* rule 184 can match eol */
#line 709 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 185:
/* rule 185 can match eol */
#line 710 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 186:
/* rule 186 can match eol */
#line 711 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 711 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
           SCAN_ERROR("invalid \\B(SIZE)(CONTENTS) escape: `\\%s'",
                      libport::escape(yytext + 1));
     }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 716 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
       // Binary escape.
       size_t len = strtol(yytext+3, 0, 0);
       // In fast mode, a Flex scanner pass its internal buffer as
       // yytext, but it smashes yytext[yyleng] to '\0', so restore it
       // here: we are going to read it ourselves.
       *yy_c_buf_p = yy_hold_char;

       // How much is available in the buffer.
       size_t remain = (yy_n_chars
                        - (yy_c_buf_p - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf));
       // How much we are going to eat.
       size_t eat = std::min(remain, len);

       // If we want more that available, go and fetch in the stream
       // itself.  Don't use yyinput, it is just not fast enough.
       if (remain < len)
       {
         // Add current buffer
         grown_string += std::string(yy_c_buf_p, remain);

         // Read remaining data
         size_t current_size = grown_string.length();
         grown_string.resize(current_size + len - eat);
         yyin->read(const_cast<char*>(grown_string.c_str()) + current_size,
                    len-eat);

       }
       else
       {
         // All we have to read is in Flex' buffer.
         aver(parser_impl_);
         grown_string += std::string(yy_c_buf_p, eat);
       }
       COLUMNS(len);

       // We played nasty tricks with Flex, tweaking its buffer by
       // hand.  Restore its state: first of all advance the cursor of
       // "eat" characters, then set the "hold" character to the next
       // character it will read (when coming back from an action,
       // flex reverses the effect of defining yytext, which starts by
       // yytext[yyleng] = 0, after having saved it in yy_hold_char).
       yy_cp = yy_c_buf_p += eat;
       yy_hold_char = *yy_cp;

       switch (int c = yyinput())
       {
       case EOF:
         EOF_ERROR("\\B");
         break;
       case ')':
         COLUMNS(1);
         break;
       default:
         SCAN_ERROR("unexpected '%s' for closing \\B, expected ')'",
                    libport::escape((char)c));
         COLUMNS(1);
         break;
       }
     }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 777 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
APPEND_VAL(yytext, yyleng);
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 779 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
LINES(yyleng); APPEND_VAL(yyleng, '\n');
	YY_BREAK
case YY_STATE_EOF(SC_STRING_OR_SYMBOL):
#line 781 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
       EOF_ERROR(delimiter + "..." + delimiter);
       unput(delimiter);
     }
	YY_BREAK

/*----------------------------.
    | White spaces and comments.  |
    `----------------------------*/
case 191:
YY_RULE_SETUP
#line 792 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
STEP(); // One-line comment.
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 793 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
++comment_level; BEGIN SC_C_COMMENT;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 795 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
STEP();
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 796 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
LINES(1); STEP();
	YY_BREAK
/* Comments. */
case YY_STATE_EOF(SC_C_COMMENT):
#line 799 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
    EOF_ERROR("a comment");
    STEP();
    BEGIN sc_default;
  }
	YY_BREAK

/* Comments. */
case 195:
#line 808 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
case 196:
YY_RULE_SETUP
#line 808 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
continue;
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 809 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
LINES(1);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 810 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
++comment_level;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 811 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
{
                  if (!--comment_level)
                  {
                    STEP();
                    BEGIN sc_default;
                  }
                }
	YY_BREAK


case 200:
YY_RULE_SETUP
#line 821 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
SCAN_FATAL("invalid character: `%s'", libport::escape(yytext));
	YY_BREAK

case 201:
YY_RULE_SETUP
#line 824 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2732 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/build-sys-linux-x86_64/src/parser/utoken.cc.raw"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SC_URBI_CHECK):
case YY_STATE_EOF(SC_META):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 788 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 788 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 787);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 824 "/alpha/home/bearclaw/projects/urbirebord/urbiforge/urbi/src/parser/utoken.l"



long long
hexadecimal(std::string t)
{
  boost::algorithm::erase_all(t, "_");
  return strtoll(t.c_str(), 0, 16);
}

// Safe conversion to a numeric value.
// The name parser_impl_ is chosen so that SCAN_ERROR can be used
// from out of the scanner.
template <typename Out>
Out
lexical_cast(parser::ParserImpl* parser_impl_, const yy::location& loc,
             std::string t)
{
  boost::algorithm::erase_all(t, "_");
  try
  {
    return boost::lexical_cast<Out>(t);
  }
  catch (const boost::bad_lexical_cast&)
  {
    SCAN_ERROR("invalid numerical literal: %1%", t);
    return 0;
  }
}

/// Split yytext which matches
/// "BIN"{BLANKS}{NATURAL}[^;]*";" setting \a keywords to
/// the first char of keyword, and return the size.
static
size_t
bin_split(char* yytext, size_t yyleng, char*& keywords)
{
  // Smash the semicolon.
  yytext[--yyleng] = 0;
  // Remove all the trailing spaces.
  while (isspace(yytext[yyleng - 1]))
    yytext[--yyleng] = '\0';

  // Skip BIN.
  yytext += 3;
  ++yytext;
  SKIP_SPACES();

  char* size = yytext;
  while (isdigit(yytext[0]))
    ++yytext;
  *yytext = 0;
  size_t res = boost::lexical_cast<size_t>(size);
  ++yytext;
  SKIP_SPACES();
  keywords = yytext;
  return res;
}

// Local Variables:
// mode: C++
// End:

